<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Util</title>
      <link href="/2022/04/08/mysql-url/"/>
      <url>/2022/04/08/mysql-url/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>SpringBoot 配置MySql:</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">spring:  datasource:    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC    username: root    password: root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>MySql 的url 参数详解:</p></blockquote><table><thead><tr><th>参数名称</th><th>参数说明</th><th>缺省值</th></tr></thead><tbody><tr><td>user</td><td>用户名</td><td></td></tr><tr><td>password</td><td>密码</td><td></td></tr><tr><td>serverTimezone</td><td>设置数据库时区,一般设置为UTC</td><td></td></tr><tr><td>useSSL</td><td>是否进行SSL连接. 高版本设置useSSL=true, 不然会有警告信息</td><td></td></tr><tr><td>useUnicode</td><td>使用Unicode字符集. 如果characterEncoding设置为utf-8, 本参数必须设置为true</td><td>false</td></tr><tr><td>characterEncoding</td><td>当useUnicode设置为true时，指定字符编码. 一般设置为utf-8</td><td>false</td></tr><tr><td>autoReconnect</td><td>当数据库连接异常中断时, 是否自动重新连接</td><td>false</td></tr><tr><td>autoReconnectForPools</td><td>是否使用针对数据库连接池的重连策略</td><td>false</td></tr><tr><td>failOverReadOnly</td><td>自动重连成功后，连接是否设置为只读</td><td>true</td></tr><tr><td>maxReconnects</td><td>autoReconnect设置为true时, 重试连接的次数</td><td>3</td></tr><tr><td>initialTimeout</td><td>autoReconnect设置为true时，两次重连之间的时间间隔. 单位: 秒</td><td>2</td></tr><tr><td>connectTimeout</td><td>和数据库服务器建立socket连接时的超时. 单位: 毫秒.  0表示永不超时</td><td>0</td></tr><tr><td>socketTimeout</td><td>socket操作(读写)超时. 单位: 毫秒.  0表示永不超时</td><td></td></tr><tr><td>zeroDateTimeBehavior</td><td>高版本设置convertToNull, 防止出现Cannot convert value ‘0000-00-00 00:00:00’ from column XX to TIMESTAMP异常</td><td></td></tr><tr><td>allowMultiQueries</td><td>允许批量更新</td><td>false</td></tr></tbody></table><blockquote><p>在xml配置文件中, url的<code>&amp;</code>符号需要转义成<code>&amp;amp;</code></p><p>例如在tomcat的server.xml中配置时样式为下👇</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">jdbc:mysql://localhost:3306/test?user=root<span class="token entity named-entity" title="&amp;">&amp;amp;</span>password=<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>autoReconnect=true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> JDBC </tag>
            
            <tag> MySql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ笔记</title>
      <link href="/2022/04/02/rabbitmq-bi-ji/"/>
      <url>/2022/04/02/rabbitmq-bi-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="RabbitMQ"><a class="header-anchor" href="#RabbitMQ"></a>RabbitMQ</h2><p><img src="https://2022-04-02-1309634420.cos.ap-beijing.myqcloud.com/RabbitMQ%2FRabbitMQ-structure.jpg" alt=""></p><ul><li><strong>Broker</strong>: 消息队列服务进程, 此进程包括两个部分: Exchange交换机(路由器) 和 Queue消息队列</li><li><strong>Exchange</strong>: 消息队列交换机, 按一定的规则将消息路由转发到某个队列, 对消息进行过滤</li><li><strong>Queue</strong>: 消息队列, 存储消息的队列</li><li><strong>Producer</strong>: 消息生产者, 即生产方客户端, 生产方客户端将消息发送</li><li><strong>Consumer</strong>: 消息消费者, 即消费方客户端, 接收MQ转发的消息</li><li><strong>BindingKey</strong>: 绑定键, 交换器与队列之间的路径名称. 可重复, 即交换机能够以相同的绑定键 绑定 不同队列</li><li><strong>RoutingKey</strong>: 路由键, 生产者发送消息时可以带上路由键发送给交换机, 交换机就会根据路由键去匹配队列</li></ul><h3 id="Exchange-交换机"><a class="header-anchor" href="#Exchange-交换机"></a>Exchange(交换机)</h3><blockquote><p>常见的交换机模型如下👇</p></blockquote><h4 id="Direct-Exchange-font-color-blue-直连交换机-font"><a class="header-anchor" href="#Direct-Exchange-font-color-blue-直连交换机-font"></a>Direct Exchange(<font color="blue">直连交换机</font>)</h4><p>根据消息携带的路由键将消息投递给对应队列</p><h4 id="Fanout-Exchange-font-color-pink-扇形交换机-font"><a class="header-anchor" href="#Fanout-Exchange-font-color-pink-扇形交换机-font"></a>Fanout Exchange(<font color="pink">扇形交换机</font>)</h4><p>没有路由键概念, 绑定的路由键无效. 接收到消息后会直接转发到所绑定的全部队列</p><h4 id="Topic-Exchange-font-color-red-主题交换机-font"><a class="header-anchor" href="#Topic-Exchange-font-color-red-主题交换机-font"></a>Topic Exchange(<font color="red">主题交换机</font>)</h4><p>特点是 在它的路由键和绑定键之间具有匹配规则,可以做到 直连交换机和扇形交换机 的功能:</p><ul><li>星号<code>*</code> 用来表示一个单词</li><li>井号<code>#</code> 用来表示零个或多个单词</li></ul><blockquote><p>例如:</p></blockquote><ol><li>队列queue1的<font color="red">绑定键</font>为<code>*.TT.*</code>, 队列queue2的<font color="red">绑定键</font>为<code>TT.#</code></li><li>如果一条消息携带的<font color="green">路由键</font>为<code>a.TT.b</code>,则会匹配到队列queue1</li><li>如果一条消息携带的<font color="green">路由键</font>为<code>TT.c.c</code>,则会匹配到队列queue2</li></ol><ul><li>Header Exchange(头交换机), Default Exchange(默认交换机), Dead Letter Exchange(死信交换机)等: 略</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 消息队列 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql数据库索引</title>
      <link href="/2022/03/07/mysql-shu-ju-ku-suo-yin/"/>
      <url>/2022/03/07/mysql-shu-ju-ku-suo-yin/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="什么是数据库索引"><a class="header-anchor" href="#什么是数据库索引"></a>什么是数据库索引</h2><p><strong><font color="red">数据库索引</font>是对数据库表中一列或多列的值进行排序的一种结构，使用索引可快速访问数据库表中的特定信息。</strong></p><p>索引的一个主要目的就是加快检索表中数据，亦即能协助信息搜索者尽快的找到符合限制条件的记录ID的辅助数据结构。</p><h2 id="为什么要使用数据库索引"><a class="header-anchor" href="#为什么要使用数据库索引"></a>为什么要使用数据库索引</h2><p>当库中有大量数据时就会降低查询效率, <strong>使用索引的目的就是 加快数据的查找和排序</strong>.</p><h3 id="数据库索引的优缺点"><a class="header-anchor" href="#数据库索引的优缺点"></a>数据库索引的优缺点</h3><p><strong>索引能让数据库<font color="green">查询数据的速度上升</font>， 而使<font color="red">写入数据的速度下降</font></strong></p><p>平衡树的结构必须一直维持在一个正确的状态，在每次数据改变时， DBMS(例如MySql)必须去重新梳理树(索引)的结构以确保它的正确，这会带来不小的性能开销.</p><p>而增删改数据都会改变平衡树各节点中的索引数据内容，破坏树结构. 所以数据库的索引越多, 写入数据的效率越低.</p><h2 id="数据库索引分类"><a class="header-anchor" href="#数据库索引分类"></a>数据库索引分类</h2><h3 id="聚集索引"><a class="header-anchor" href="#聚集索引"></a>聚集索引</h3><p><strong>一个表只能有一个主键， 也只能有一个聚集索引，因为主键的作用就是把表的数据格式转换成索引(平衡树)的格式放置。</strong></p><h3 id="非聚集索引"><a class="header-anchor" href="#非聚集索引"></a>非聚集索引</h3><p><strong>即非主键字段的索引. 非聚集索引和聚集索引一样， 同样是采用平衡树作为索引的数据结构。索引树结构中各节点的值来自于表中的索引字段， 假如给user表的name字段加上索引 ， 那么索引就是由name字段中的值构成</strong></p><h3 id="区别"><a class="header-anchor" href="#区别"></a>区别</h3><p>非聚集索引和聚集索引的区别在于,</p><p>通过聚集索引可以查到需要查找的数据， 而通过非聚集索引可以查到记录对应的主键值 ， 再使用主键的值通过聚集索引查找到需要的数据</p><h2 id="索引的注意事项"><a class="header-anchor" href="#索引的注意事项"></a>索引的注意事项</h2><h3 id="联合索引"><a class="header-anchor" href="#联合索引"></a>联合索引</h3><blockquote><p>联合索引也是非聚集索引. 联合索引是由多个字段组成的索引</p></blockquote><ul><li>联合索引遵循最左前缀原则</li></ul><p>例如, 某<code>student</code>学生表有联合索引:</p><blockquote><p>key id_age_name_sex (‘age’, ‘name’, ‘sex’)</p></blockquote><p>则:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> age <span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">and</span> name <span class="token operator">=</span> <span class="token string">'小张'</span><span class="token punctuation">;</span><span class="token comment">-- 走索引</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'小张'</span> <span class="token operator">and</span> sex <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span><span class="token comment">-- 不走索引, 因为联合索引的最左前缀字段'age'没有被应用</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'小张'</span> <span class="token operator">and</span> sex <span class="token operator">=</span> <span class="token string">'男'</span> <span class="token operator">and</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">-- 走索引, 因为联合索引的最左前缀字段'age'被应用了</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> age <span class="token operator">&gt;</span> <span class="token number">20</span> <span class="token operator">and</span> name <span class="token operator">=</span> <span class="token string">'小张'</span><span class="token punctuation">;</span><span class="token comment">-- 只有age走索引, 当字段为范围区间时,会结束索引对之后的索引字段的使用</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> age <span class="token operator">!=</span> <span class="token number">15</span> <span class="token operator">and</span> name <span class="token operator">=</span> <span class="token string">'小张'</span><span class="token punctuation">;</span><span class="token comment">-- 不走索引, 索引查询不支持 != 符号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="什么情况不会走索引"><a class="header-anchor" href="#什么情况不会走索引"></a>什么情况不会走索引</h3><p>表student中两个字段age,name加了索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">key</span> <span class="token string">'idx_age'</span> <span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">key</span> <span class="token string">'idx_name'</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>Like这种就是%在后面的走索引, 在前面的不走索引:</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> <span class="token string">'name'</span> <span class="token operator">like</span> <span class="token string">'王%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>用索引列进行计算的，不走索引:</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> age <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>对索引列用函数了，不走索引:</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">=</span> concat<span class="token punctuation">(</span><span class="token string">'王'</span><span class="token punctuation">,</span><span class="token string">'富贵'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>索引列用了 != 不走索引：</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> age <span class="token operator">!=</span> <span class="token number">18</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> MySql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql分库分表</title>
      <link href="/2022/03/07/mysql-fen-ku-fen-biao/"/>
      <url>/2022/03/07/mysql-fen-ku-fen-biao/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="什么是分库分表"><a class="header-anchor" href="#什么是分库分表"></a>什么是分库分表</h2><blockquote><p>其实 <code>分库</code> 和 <code>分表</code> 是两个概念, 只不过通常分库与分表的操作会同时进行, 所以习惯性的将它们合在一起叫做分库分表.</p></blockquote><p>**分库分表是一种数据库优化的方式. **</p><p><strong>为了解决由于库、表数据量过大，而导致数据库性能持续下降的问题。按照一定的规则，将原本数据量大的数据库拆分成多个单独的数据库，将原本数据量大的表拆分成若干个数据表，使得单一的库、表性能达到最优的效果（响应速度快），以此提升整体数据库性能。</strong></p><h2 id="为什么要分库分表"><a class="header-anchor" href="#为什么要分库分表"></a>为什么要分库分表</h2><blockquote><p>要根据业务类型，和业务容量的评估，来选择和判断是否使用分库分表。</p></blockquote><blockquote><p><strong>数据库性能瓶颈</strong></p></blockquote><ol><li>大量请求阻塞, 无法获取连接. 高并发时连接数不够用.</li><li>SQL操作变慢, 数据库处理数据的效率出了问题.</li><li>存储出现问题, 单机存储的数据量太大.</li></ol><h2 id="如何分库分表"><a class="header-anchor" href="#如何分库分表"></a>如何分库分表</h2><p><strong>分库分表的核心理念就是对数据进行切分（<code>Sharding</code>），以及切分后如何对数据的快速定位与查询结果整合。</strong></p><p>而分库与分表都可以从：<font color="red">垂直</font>(纵向) 和 <font color="red">水平</font>(横向) 两种纬度进行切分。</p><h3 id="垂直切分"><a class="header-anchor" href="#垂直切分"></a>垂直切分</h3><ol><li><p>分库</p><p>垂直分库容易理解，核心理念就四个字：专库专用。</p><p>在一定程度上，垂直切分似乎提升了一些数据库性能，可实际上并没有解决由于单表数据量过大导致的性能问题，需要配合水平切分方式来解决。</p></li><li><p>分表</p><p>垂直分表是基于数据表的列(字段)为依据切分的, 是一种大表拆小表的模式。</p><p>例如：一张订单表，将订单金额、订单编号等访问频繁的字段，单独拆成一张表，把 <code>blob</code> 类型这样的大字段或访问不频繁的字段，拆分出来创建一个单独的扩展表 ，这样每张表只存储原表的一部分字段，再将拆分出来的表分散到不同的库中。</p></li></ol><blockquote><p>垂直切分的优点</p></blockquote><ul><li>解决业务系统层面的耦合，业务清晰</li><li>与微服务的治理类似，也能对不同业务的数据进行分级管理、维护、监控、扩展等</li><li>高并发场景下，垂直切分一定程度的提升IO、数据库连接数、单机硬件资源的瓶颈</li></ul><blockquote><p>垂直切分的缺点</p></blockquote><ul><li>部分表无法join，只能通过接口聚合方式解决，提升了开发的复杂度</li><li>分布式事务处理复杂</li><li>依然存在单表数据量过大的问题（需要水平切分）</li></ul><h3 id="水平切分"><a class="header-anchor" href="#水平切分"></a>水平切分</h3><ol><li><p>分库</p><p>水平分库是把同一个表按一定规则拆分到不同的数据库中，每个库可以位于不同的服务器上，以此实现水平扩展，是一种常见的提升数据库性能的方式。</p><p>这种方案往往能解决单库存储量及性能瓶颈问题，但由于同一个表被分配在不同的数据库中，数据的访问需要额外的路由工作，因此系统的复杂度也被提升了。</p></li><li><p>分表</p><p>水平分表是在同一个数据库内，把一张大数据量的表按一定规则，切分成多个结构完全相同表，而每个表只存原表的一部分数据。</p><p>例如：一张 <code>order</code> 订单表有 900万数据，经过水平拆分出来三个表，<code>order_1</code>、<code>order_2</code>、<code>order_3</code>，每张表存有数据 300万，以此类推。</p></li></ol><p><strong>水平分表尽管拆分了表，但子表都还是在同一个数据库实例中，只是解决了单一表数据量过大的问题，并没有将拆分后的表分散到不同的机器上，还在竞争同一个物理机的CPU、内存、网络IO等。</strong></p><p><strong>要想进一步提升性能，就需要将拆分后的表分散到不同的数据库中，达到分布式的效果。</strong></p><blockquote><p>水平切分的优点</p></blockquote><ul><li><p>解决高并发时单库数据量过大的问题，提升系统稳定性和负载能力。</p></li><li><p>业务系统改造的工作量不是很大。</p></li></ul><blockquote><p>水平切分的缺点</p></blockquote><ul><li>跨分片的事务一致性难以保证。</li><li>跨库的join关联查询性能较差。</li><li>扩容的难度和维护量较大。</li></ul><h2 id="分库分表的问题"><a class="header-anchor" href="#分库分表的问题"></a>分库分表的问题</h2><h3 id="分布式事务"><a class="header-anchor" href="#分布式事务"></a>分布式事务</h3><p>由于表分布在不同库中，不可避免会带来跨库事务问题。一般可使用 "<code>三阶段提交</code> "和 “<code>两阶段提交</code>” 处理，但是这种方式性能较差，代码开发量也比较大。通常做法是做到最终一致性的方案，如果不苛求系统的实时一致性，只要在允许的时间段内达到最终一致性即可，采用事务补偿的方式。</p><p>可以应用分布式事务框架来做分布式事务的管理。</p><h3 id="分页、排序、跨库联合查询"><a class="header-anchor" href="#分页、排序、跨库联合查询"></a>分页、排序、跨库联合查询</h3><p>在分库分表后，这些使用频率非常高的操作成为难题。</p><p>将分散在不同库中表的数据查询出来，再将所有结果进行汇总整理后提供给用户。</p><h3 id="分布式主键"><a class="header-anchor" href="#分布式主键"></a>分布式主键</h3><p>分库分表后已经无法依靠单个数据库实例上的自增主键来实现不同数据库之间的全局唯一主键，此时一个能够生成全局唯一ID的系统是非常必要的，这个全局唯一ID就叫 <code>分布式ID</code>。</p><h3 id="读写分离"><a class="header-anchor" href="#读写分离"></a>读写分离</h3><p>大部分主流的关系型数据库都提供了主从架构的高可用方案，而我们需要实现 <code>读写分离</code> + <code>分库分表</code>，读库与写库都要做分库分表处理.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> MySql </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 分库分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo-quickStart</title>
      <link href="/2022/03/01/dubbo-quickstart/"/>
      <url>/2022/03/01/dubbo-quickstart/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Maven依赖"><a class="header-anchor" href="#Maven依赖"></a>Maven依赖</h2><blockquote><p>本例中公共模块的依赖👇</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Dubbo服务的提供者和调用者需要的依赖👇</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- Apache官方提供的 Dubbo 和 SpringBoot 整合的起步依赖 --&gt;</span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-spring-boot-starter --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- zookeeper客户端  引入此依赖curator-framework curator-recipes 都有 --&gt;</span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.curator/curator-x-discovery --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>curator-x-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 依赖于公共模块 这个自定义的模块提供了公共的接口,实体类等以供调用 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.dzl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>dubbo-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SpringBoot配置"><a class="header-anchor" href="#SpringBoot配置"></a>SpringBoot配置</h2><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">dubbo:  application:    # 配置应用名,服务提供者和调用者不能同名    name: dubbo-provider  registry:    # 连接zookeeper注册中心    address: zookeeper://127.0.0.1:2181  protocol:    name: dubbo    port: 20880server:  port: 8091<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="启动类"><a class="header-anchor" href="#启动类"></a>启动类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableDubbo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token comment">/** * 启动类上需要加入@EnableDubbo注解,表示启用Dubbo */</span><span class="token annotation punctuation">@EnableDubbo</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DubboProviderApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DubboProviderApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码"><a class="header-anchor" href="#代码"></a>代码</h2><h3 id="公共模块👇"><a class="header-anchor" href="#公共模块👇"></a>公共模块👇</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span><span class="token comment">/** * 实体类 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserService</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 用户登录     *     * @param username 用户名     * @param password 密码     * @return 登陆结果     */</span>    <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="服务提供者👇"><a class="header-anchor" href="#服务提供者👇"></a>服务提供者👇</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DubboService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * 注解@DubboService标识一个服务提供者 */</span><span class="token annotation punctuation">@DubboService</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 模拟数据库中的数据     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> USERS <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"jerry"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 模拟查询数据库的逻辑     *     * @param username 用户名     * @param password 密码     * @return 结果     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> USERS<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"登陆成功"</span> <span class="token operator">:</span> <span class="token string">"登陆失败"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="服务消费者👇"><a class="header-anchor" href="#服务消费者👇"></a>服务消费者👇</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DubboReference</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@DubboReference</span>    <span class="token keyword">private</span> <span class="token class-name">IUserService</span> userServiceImpl<span class="token punctuation">;</span>    <span class="token comment">/**     * 用户登录的接口     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户登录接口请求参数: username:{}, password:{}"</span><span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> ret<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ret <span class="token operator">=</span> userServiceImpl<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"内部异常: {}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ret <span class="token operator">=</span> <span class="token string">"内部异常..."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="启动测试"><a class="header-anchor" href="#启动测试"></a>启动测试</h2><blockquote><p>首先在本地启动ZooKeeper注册中心</p></blockquote><blockquote><p>浏览器访问 <a href="http://localhost:8091/user/login?username=tom&amp;&amp;password=123">这里</a>   (<code>http://localhost:8091/user/login?username=tom&amp;&amp;password=123</code>)</p></blockquote><blockquote><p>预期结果👇</p></blockquote><p><img src="http://r7lh60uut.hb-bkt.clouddn.com/Dubbo/Dubbo-demo-web.png" alt=""></p><p><img src="http://r7lh60uut.hb-bkt.clouddn.com/Dubbo/Dubbo-demo-result.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> quickStart </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ-quickStart</title>
      <link href="/2022/02/27/rabbitmq-quickstart/"/>
      <url>/2022/02/27/rabbitmq-quickstart/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Maven依赖-2"><a class="header-anchor" href="#Maven依赖-2"></a>Maven依赖</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">SpringBoot整合RabbitMQ的起步依赖</span> <span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">RabbitMQ集成测试</span> <span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-rabbit-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SpringBoot配置-2"><a class="header-anchor" href="#SpringBoot配置-2"></a>SpringBoot配置</h2><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 8080spring:  application:    # 项目名字    name: rabbitmq-demo  # 配置RabbitMQ服务器:  主机,端口号,用户名和密码等  rabbitmq:    host: 127.0.0.1    port: 5672    username: guest    password: guest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RabbitMQ主配置类"><a class="header-anchor" href="#RabbitMQ主配置类"></a>RabbitMQ主配置类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token comment">/** * 启动类上需要加入@EnableRabbit注解,表示开启基于注解的RabbitMQ模式. */</span><span class="token annotation punctuation">@EnableRabbitMQ</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQDemoApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MsgSenderApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>RabbitMQ的交换机(Exchange),队列(Queue)以及绑定(Binding)的配置:</p><p><strong>如果仅作为消息消费者,则不需要此配置; 如果添加了此配置,则也具备发送消息的功能.</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Binding</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">BindingBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">DirectExchange</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Queue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token comment">/** * RabbitMQ的配置类 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectRabbitConfig</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 创建消息队列     * 名称 directQueue     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">directQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// durable:是否持久化,默认是false,持久化队列：会被存储在磁盘上，当消息代理重启时仍然存在，暂存队列：当前连接有效</span>        <span class="token comment">// exclusive:默认也是false，只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable</span>        <span class="token comment">// autoDelete:是否自动删除，当没有生产者或者消费者使用此队列，该队列会自动删除。</span>        <span class="token comment">//一般设置一下队列的持久化就好,其余两个就是默认false</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"directQueue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 创建交换机, 此交换机是直连交换机(即Direct-Exchange)     * 名称 directExchange     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">DirectExchange</span> <span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">"directExchange"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 创建绑定, 将消息队列和交换机绑定, 并设置路由键(即Routing-Key)     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">Binding</span> <span class="token function">bindingDirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">directQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">"directRouting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>消息发送方</strong>的消息推送示例:</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RabbitTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>UUID<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMessageController</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 使用RabbitTemplate, 提供了接收/发送等等方法     */</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sendDirectMessage"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendDirectMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> messageId <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> createTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"messageId"</span><span class="token punctuation">,</span> messageId<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"messageData"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">,</span> createTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将消息携带绑定键值：TestDirectRouting 发送到交换机TestDirectExchange</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"directExchange"</span><span class="token punctuation">,</span> <span class="token string">"directRouting"</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>消息接收方</strong>消费消息:</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token comment">/** * 创建RabbitMQ的队列监听 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"directQueue"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectReceiver</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * @param testMessage 消息队列中的数据, 数据类型与发送的类型相对应     */</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> testMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息队列的接收方收到消息: "</span> <span class="token operator">+</span> testMessage<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="预期结果"><a class="header-anchor" href="#预期结果"></a>预期结果</h2><blockquote><p>需要开启RabbitMQ服务器并正确配置连接.</p><p>RabbitMQ管理界面地址:  <a href="http://localhost:15672/#/">RabbitMQ Management</a></p></blockquote><ol><li><p>初始状态: 消息队列无消息, 无新建的交换机</p></li><li><p>消息发送端将消息队列绑定交换机, 并将消息推送到消息队列中</p></li><li><p>目前的消息队列中暂存了100条消息,这些消息尚为被消费</p></li><li><p>开启已经监听指定消息队列的消息接收端, 消费队列中的消息</p></li><li><p>消息推送到消息队列暂存–&gt;开启配置队列监听的消息消费端–&gt;消费消息队列中的消息 已完成, 消息队列已被清空</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> quickStart </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 消息队列 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis工具</title>
      <link href="/2022/02/24/redis-gong-ju/"/>
      <url>/2022/02/24/redis-gong-ju/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="maven依赖"><a class="header-anchor" href="#maven依赖"></a>maven依赖</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Redis连接配置"><a class="header-anchor" href="#Redis连接配置"></a>Redis连接配置</h2><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">spring:  redis:# Redis数据库索引（默认为0）    database: 0# Redis服务器地址     host: 127.0.0.1# Redis服务器连接端口      port: 6379# Redis服务器连接密码（默认为空）    password:    pool:# 连接池最大连接数（使用负值表示没有限制）       max-active: 200# 连接池中的最大空闲连接       max-idle: 10# 连接池最大阻塞等待时间（使用负值表示没有限制）      max-wait: -1# 连接池中的最小空闲连接       min-idle: 0# 连接超时时间（毫秒）    timeout: 1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Redis配置类"><a class="header-anchor" href="#Redis配置类"></a>Redis配置类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JsonAutoDetect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnectionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">StringRedisSerializer</span><span class="token punctuation">;</span> <span class="token comment">/** * redis配置类 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectMapper</span> om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper<span class="token punctuation">.</span>DefaultTyping</span><span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringRedisSerializer</span> stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// key采用String的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// hash的key也采用String的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// value序列化方式采用jackson</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// hash的value序列化方式采用jackson</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Redis操作工具类"><a class="header-anchor" href="#Redis操作工具类"></a>Redis操作工具类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">CollectionUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span> <span class="token comment">/** * Redis工具类 * */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtil</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>     <span class="token comment">// =============================common============================</span>    <span class="token comment">/**     * 指定缓存失效时间     *     * @param key  键     * @param time 时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 根据key 获取过期时间     *     * @param key 键 不能为null     * @return 时间(秒) 返回0代表为永久有效     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 判断key是否存在     *     * @param key 键     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 删除缓存     *     * @param key 可以传一个值 或多个     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">arrayToList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// ============================String=============================</span>     <span class="token comment">/**     * 普通缓存获取     *     * @param key 键     * @return 值     */</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 普通缓存放入     *     * @param key   键     * @param value 值     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 普通缓存放入并设置时间     *     * @param key   键     * @param value 值     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期     * @return true成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 递增     *     * @param key   键     * @param delta 要增加几(大于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">incr</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递增因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 递减     *     * @param key   键     * @param delta 要减少几(小于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">decr</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递减因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">-</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// ================================Map=================================</span>     <span class="token comment">/**     * HashGet     *     * @param key  键 不能为null     * @param item 项 不能为null     * @return 值     */</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">hget</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 获取hashKey对应的所有键值     *     * @param key 键     * @return 对应的多个键值     */</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">hmget</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * HashSet     *     * @param key 键     * @param map 对应多个键值     * @return true 成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * HashSet 并设置时间     *     * @param key  键     * @param map  对应多个键值     * @param time 时间(秒)     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @return true 成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @param time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间     * @return true 成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 删除hash表中的值     *     * @param key  键 不能为null     * @param item 项 可以使多个 不能为null     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hdel</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 判断hash表中是否有该项的值     *     * @param key  键 不能为null     * @param item 项 不能为null     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hHasKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * hash递增 如果不存在,就会创建一个 并把新增后的值返回     *     * @param key  键     * @param item 项     * @param by   要增加几(大于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hincr</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> by<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * hash递减     *     * @param key  键     * @param item 项     * @param by   要减少记(小于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hdecr</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token operator">-</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// ============================set=============================</span>     <span class="token comment">/**     * 根据key获取Set中的所有值     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">sGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 根据value从一个set中查询,是否存在     *     * @param key   键     * @param value 值     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sHasKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 将数据放入set缓存     *     * @param key    键     * @param values 值 可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 将set数据放入缓存     *     * @param key    键     * @param time   时间(秒)     * @param values 值 可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSetAndTime</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Long</span> count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 获取set缓存的长度     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sGetSetSize</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 移除值为value的     *     * @param key    键     * @param values 值 可以是多个     * @return 移除的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">setRemove</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Long</span> count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// ===============================list=================================</span>     <span class="token comment">/**     * 获取list缓存的内容     *     * @param key   键     * @param start 开始     * @param end   结束 0 到 -1代表所有值     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">lGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 获取list缓存的长度     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lGetListSize</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 通过索引 获取list中的值     *     * @param key   键     * @param index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">lGetIndex</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 根据索引修改list中的某条数据     *     * @param key   键     * @param index 索引     * @param value 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lUpdateIndex</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 移除N个值为value     *     * @param key   键     * @param count 移除多少个     * @param value 值     * @return 移除的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lRemove</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> count<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Long</span> remove <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> remove<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis笔记</title>
      <link href="/2022/02/21/redis-bi-ji/"/>
      <url>/2022/02/21/redis-bi-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="我的Redis笔记"><a class="header-anchor" href="#我的Redis笔记"></a>我的Redis笔记</h2><h3 id="什么是Redis"><a class="header-anchor" href="#什么是Redis"></a>什么是Redis</h3><ul><li><p><strong>Redis(Remote Dictionary Server)是一个使用C语言编写的, 开源的(BSD许可), 高性能, 非关系型(NoSql)的键值对数据库.</strong></p></li><li><p>Redis 可以存储键和五种不同类型的值之间的映射. 键的类型只能为字符串,  值支持五种数据类型: 字符串, 列表,集合,散列表 和 有序集合.</p></li><li><p>与传统数据库不同的是, Redis 的数据是存在内存中的, 读写速度非常快, 被广泛应用于缓存方向, 每秒可以处理超过 10万次读写操作.</p></li><li><p>Redis 也经常用来做分布式锁. 除此之外, Redis 支持事务, 持久化, LUA脚本, LRU驱动事件, 多种集群方案.</p></li></ul><h3 id="Redis的优缺点"><a class="header-anchor" href="#Redis的优缺点"></a>Redis的优缺点</h3><ul><li>优点:<ul><li><strong>读写性能优异</strong>.  Redis能读的速度是110000次/s, 写的速度是81000次/s.</li><li><strong>支持数据持久化</strong>. 支持AOF和RDB两种持久化方式.</li><li><strong>支持事务</strong>. Redis的所有操作都是原子性的, 同时Redis还支持对几个操作合并后的原子性执行</li><li><strong>数据结构丰富</strong>, 除了支持string类型的value外还支持hash, set, zset, list等数据结构</li><li><strong>支持主从复制</strong>, 主机会自动将数据同步到从机, 可以进行读写分离</li></ul></li><li>缺点:<ul><li><strong>数据库容量受到物理内存的限制, 不能用作海量数据的高性能读写.</strong> 因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上.</li><li><strong>Redis 不具备自动容错和恢复功能</strong>. 主机从机的宕机都会导致前端部分读写请求失败, 需要等待机器重启或者手动切换前端的IP才能恢复.</li><li><strong>主机宕机, 宕机前有部分数据未能及时同步到从机, 切换IP后还会引入数据不一致的问题, 降低了系统的可用性</strong></li><li><strong>Redis 较难支持在线扩容</strong>. 在集群容量达到上限时在线扩容会变得很复杂. 为避免这一问题，运维人员在系统上线时必须确保有足够的空间, 对资源造成了很大的浪费.</li></ul></li></ul><h3 id="为什么要用Redis-为什么要用缓存"><a class="header-anchor" href="#为什么要用Redis-为什么要用缓存"></a>为什么要用Redis / 为什么要用缓存</h3><blockquote><p>主要从 <code>高性能</code> 和 <code>高并发</code> 这两点来看待此问题</p></blockquote><h4 id="高性能"><a class="header-anchor" href="#高性能"></a>高性能</h4><p>假如用户第一次访问数据库中的某些数据, 这个过程会比较慢, 因为是从硬盘上读取的.</p><p>将该用户访问的数据存在数缓存中, 这样下一次再访问这些数据的时候就可以直接从缓存中获取了.</p><p>操作缓存就是直接操作内存,<strong>速度非常快</strong>. 如果数据库中的对应数据改变的之后. 同步改变缓存中相应的数据即可.</p><p><img src="http://r7lh60uut.hb-bkt.clouddn.com/Redis%E7%BC%93%E5%AD%98.png" alt=""></p><h4 id="高并发"><a class="header-anchor" href="#高并发"></a>高并发</h4><p>直接操作缓存能够承受的请求是远远大于直接访问数据库的, 所以我们可以考虑把数据库中的部分数据转移到缓存中去, 这样用户的一部分请求会直接到缓存这里而不用经过数据库.</p><p><img src="http://r7lh60uut.hb-bkt.clouddn.com/Redis%E9%AB%98%E5%B9%B6%E5%8F%91.png" alt=""></p><h3 id="为什么要用-Redis-而不用-map-guava-做缓存"><a class="header-anchor" href="#为什么要用-Redis-而不用-map-guava-做缓存"></a>为什么要用 Redis 而不用 map/guava 做缓存?</h3><p>缓存分为本地缓存和分布式缓存. 以 Java 为例, 使用自带的 map 或者 guava 实现的是本地缓存, 最主要的特点是轻量以及快速, 生命周期随着 jvm 的销毁而结束.</p><p>并且在多实例的情况下, 每个实例都需要各自保存一份缓存, 缓存不具有一致性.</p><p>使用 redis 或 memcached 之类的称为分布式缓存, 在多实例的情况下, 各实例共用一份缓存数据, 缓存具有一致性. 缺点是需要保持 redis 或 memcached服务的高可用, 整个程序架构上较为复杂.</p><h3 id="Redis为什么这么快"><a class="header-anchor" href="#Redis为什么这么快"></a>Redis为什么这么快</h3><ol><li><p>完全基于内存, 绝大部分请求是纯粹的内存操作, 非常快速. 数据存在内存中, 类似于 HashMap, HashMap 的优势就是查找和操作的时间复杂度都是O(1)</p></li><li><p>数据结构简单, 对数据操作也简单, Redis 中的数据结构是专门进行设计的</p></li><li><p>采用单线程, 避免了不必要的上下文切换和竞争条件, 也不存在多进程或者多线程导致的切换而消耗 CPU, 不用去考虑各种锁的问题, 不存在加锁释放锁操作, 没有因为可能出现死锁而导致的性能消耗</p></li><li><p>使用多路 I/O 复用模型, 非阻塞 IO</p></li><li><p>使用底层模型不同, 它们之间底层实现方式以及与客户端之间通信的应用协议不一样, Redis 直接自己构建了 VM 机制, 因为一般的系统调用系统函数的话, 会浪费一定的时间去移动和请求</p></li></ol><h3 id="数据类型"><a class="header-anchor" href="#数据类型"></a>数据类型</h3><h4 id="Redis的数据类型"><a class="header-anchor" href="#Redis的数据类型"></a>Redis的数据类型</h4><p>Redis主要有5种数据类型, 包括String, List, Set, Zset, Hash. 满足大部分的使用要求</p><p><img src="http://r7lh60uut.hb-bkt.clouddn.com/Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt=""></p><h4 id="Redis的应用场景"><a class="header-anchor" href="#Redis的应用场景"></a>Redis的应用场景</h4><h5 id="总结一"><a class="header-anchor" href="#总结一"></a>总结一</h5><p><strong>计数器</strong></p><p>可以对 String 进行自增自减运算, 从而实现计数器功能. Redis 这种内存型数据库的读写性能非常高, 很适合存储频繁读写的计数量.</p><p><strong>缓存</strong></p><p>将热点数据放到内存中, 设置内存的最大使用量以及淘汰策略来保证缓存的命中率.</p><p><strong>会话缓存</strong></p><p>可以使用 Redis 来统一存储多台应用服务器的会话信息. 当应用服务器不再存储用户的会话信息, 也就不再具有状态, 一个用户可以请求任意一个应用服务器, 从而更容易实现高可用性以及可伸缩性.</p><p><strong>全页缓存（FPC）</strong></p><p>除基本的会话token之外, Redis还提供很简便的FPC平台. 以Magento为例, Magento提供一个插件来使用Redis作为全页缓存后端. 此外, 对WordPress的用户来说, Pantheon有一个非常好的插件 wp-redis, 这个插件能帮助你以最快速度加载你曾浏览过的页面.</p><p><strong>查找表</strong></p><p>例如 DNS 记录就很适合使用 Redis 进行存储. 查找表和缓存类似, 也是利用了 Redis 快速的查找特性. 但是查找表的内容不能失效, 而缓存的内容可以失效, 因为缓存不作为可靠的数据来源.</p><p><strong>消息队列(发布/订阅功能)</strong></p><p>List 是一个双向链表, 可以通过 lpush 和 rpop 写入和读取消息. 不过最好使用 Kafka, RabbitMQ 等消息中间件</p><p><strong>分布式锁实现</strong></p><p>在分布式场景下, 无法使用单机环境下的锁来对多个节点上的进程进行同步. 可以使用 Redis 自带的 SETNX 命令实现分布式锁, 除此之外, 还可以使用官方提供的 RedLock 分布式锁实现.</p><p><strong>其它</strong></p><p>Set 可以实现交集, 并集等操作, 从而实现共同好友等功能. ZSet 可以实现有序性操作, 从而实现排行榜等功能.</p><h5 id="总结二"><a class="header-anchor" href="#总结二"></a>总结二</h5><p>Redis相比其他缓存, 有一个非常大的优势, 就是支持多种数据类型.</p><p>数据类型说明string字符串，最简单的k-v存储hashhash格式，value为field和value，适合ID-Detail这样的场景。list简单的list，顺序列表，支持首位或者末尾插入数据set无序list，查找速度快，适合交集、并集、差集处理sorted set有序的set</p><p>其实，通过上面的数据类型的特性，基本就能想到合适的应用场景了。</p><p>string——适合最简单的k-v存储，类似于memcached的存储结构，短信验证码，配置信息等，就用这种类型来存储。</p><p>hash——一般key为ID或者唯一标识，value对应的就是详情了。如商品详情，个人信息详情，新闻详情等。</p><p>list——因为list是有序的，比较适合存储一些有序且数据相对固定的数据。如省市区表、字典表等。因为list是有序的，适合根据写入的时间来排序，如：最新的***，消息队列等。</p><p>set——可以简单的理解为ID-List的模式，如微博中一个人有哪些好友，set最牛的地方在于，可以对两个set提供交集、并集、差集操作。例如：查找两个人共同的好友等。</p><p>Sorted Set——是set的增强版本，增加了一个score参数，自动会根据score的值进行排序。比较适合类似于top 10等不根据插入的时间来排序的数据。</p><p>如上所述，虽然Redis不像关系数据库那么复杂的数据结构，但是，也能适合很多场景，比一般的缓存数据结构要多。了解每种数据结构适合的业务场景，不仅有利于提升开发效率，也能有效利用Redis的性能。</p><blockquote><p>原文链接: <a href="https://www.cnblogs.com/qinlulu/p/12855443.html">点此</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery笔记</title>
      <link href="/2022/02/20/jquery-bi-ji/"/>
      <url>/2022/02/20/jquery-bi-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="jQuery是什么"><a class="header-anchor" href="#jQuery是什么"></a>jQuery是什么</h2><p><code>jQuery</code>是一个快速，小巧，功能丰富的JavaScript库,使HTML文档遍历和操作，事件处理和动画等操作变得更加简单.**</p><p><strong>jQuery的所有功能都是通过JavaScript访问的.</strong></p><blockquote><p><strong>JQuery的特点</strong></p></blockquote><ul><li>轻量级</li><li>强大的选择器</li><li>出色的DOM操作的封装</li><li>可靠的事件处理机制</li><li>完善的Ajax</li><li>不污染顶级变量</li><li>出色的浏览器兼容性</li><li>链式操作方式</li><li>隐式迭代</li><li>行为层与结构层的分离</li><li>丰富的插件支持</li><li>完善的文档</li><li>开源</li></ul><blockquote><p>使用jQuery时，首先需要使用<strong>脚本</strong>标签将其<strong>添加</strong>到我们的HTML文档的标题：</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- src设置jq的绝对或相对路径,用于引入jq,一般写在&lt;head&gt;标签中 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="jQuery入口函数"><a class="header-anchor" href="#jQuery入口函数"></a>jQuery入口函数</h2><p>在使用<code>HTML文档之前</code>等待HTML文档的<code>DOM节点准备就绪</code>后执行: 使用 <code>document(文档) </code>对象的 <code>ready</code>事件：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 在这写 jQuery 代码</span>    <span class="token comment">//类似于原生js的window.onload</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>$ </code>用于访问<code>jQuery</code>。 从这里开始，代码访问document对象，并定义了当 <code>document </code>的 <code>ready </code>事件触发时要调用的函数。</p><p><strong>上述代码的简写方式：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 在这写 jQuery 代码</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong><code>jQuery</code>入口函数与<code>window.onload</code>的区别：执行时机不同.</strong></p><ul><li><code>jQuery</code>入口函数，是在文档加载完成后，就执行。即<strong>DOM树加载完成后就可操作，不用等所有的外部资源都加载完成。</strong></li></ul><ul><li><code>Js</code>入口函数是在所有的文件资源加载完成后才执行。这些资源包括：<strong>页面文档、外部的js文件、外部的css文件、图片等</strong>。</li></ul><h2 id="jQuery选择器"><a class="header-anchor" href="#jQuery选择器"></a>jQuery选择器</h2><p>jQuery选择器以<strong>美元符</strong>和<strong>圆括号</strong>开头,允许对元素组或单个元素进行操作.</p><p>最基本的选择器包括id选择器,类选择器和元素选择器,它们根据相应的属性值来选择元素</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test"</span><span class="token punctuation">)</span> <span class="token comment">// 选择id="test"的元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".menu"</span><span class="token punctuation">)</span> <span class="token comment">// 选择class="menu"的所有元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span>   <span class="token comment">// 选择所有&lt;div&gt;元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://r7lh60uut.hb-bkt.clouddn.com/JQ%E5%B8%B8%E7%94%A8%E9%80%89%E6%8B%A9%E5%99%A8.png" alt=""></p><h2 id="常用方法"><a class="header-anchor" href="#常用方法"></a>常用方法</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>attr()</td><td>获取或设置指定属性的值:当传入2个参数时修改属性为指定值</td></tr><tr><td>removeAttr()</td><td>删除元素的属性</td></tr><tr><td>text()</td><td>获取或设置文本内容</td></tr><tr><td>html()</td><td>获取或设置文本内容(包括HTML标记)</td></tr><tr><td>val()</td><td>获取或设置单表字段的值,例如文本框input和下拉列表select等</td></tr><tr><td>prepend()</td><td>在被选元素中的开头插入内容</td></tr><tr><td>append()</td><td>在被选元素中的结尾插入内容</td></tr><tr><td>before()</td><td>在被选元素之前插入内容</td></tr><tr><td>after()</td><td>在被选元素之后插入内容</td></tr></tbody></table><h2 id="操作CSS"><a class="header-anchor" href="#操作CSS"></a>操作CSS</h2><p>jQuery 拥有若干进行 CSS 操作的方法：</p><ul><li><p><strong><code>addClass()</code></strong> - 向被选元素添加一个或多个类<br>要在 <strong>addClass()</strong> 方法中指定<strong>多个类</strong>, 只需使用<strong>空格</strong>分隔.下同. 例如$(“div”).addClass(“class1 class2”);</p></li><li><p><strong><code>removeClass()</code></strong> - 从被选元素删除一个或多个类</p><p>如果<strong>没有规定参数</strong>,则从被选元素中<strong>删除所有类</strong></p></li><li><p><strong><code>toggleClass()</code></strong> - 对被选元素进行添加/删除类的切换操作</p><p>检查指定的类.不存在则<strong>添加</strong>,如果存在则<strong>删除</strong>.这就是所谓的切换效果</p></li><li><p><strong><code>css()</code></strong> - 设置或返回样式属性</p><p>设置样式:$(selector).css(property,value)<br><strong>property</strong> ：规定 CSS <strong>属性名称</strong>，比如 “color”、“font-weight” 等<br><strong>value</strong>： 规定 CSS <strong>属性的值</strong>，比如 “red”、“bold” 等</p></li></ul><p><strong>css()</strong> 方法可以使用JSON语法设置多个CSS属性。</p><p>语法由<code>“属性”：“值”</code>对组成,以<code>,</code>分隔,并以<code>{}</code>包裹</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">"property"</span><span class="token operator">:</span><span class="token string">"value"</span><span class="token punctuation">,</span><span class="token string-property property">"property"</span><span class="token operator">:</span><span class="token string">"value"</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="文档对象模型DOM"><a class="header-anchor" href="#文档对象模型DOM"></a>文档对象模型DOM</h2><p><strong>DOM(Document Object Model)仅关注浏览器所载入的文档.</strong><br><strong>DOM将html文档视为由元素、属性和文本组成的一棵DOM树。</strong></p><p>可以将html文档中的<strong>每个成分</strong>视为一个<strong>节点</strong>，节点的特点如下：</p><ul><li>整个<strong>文档</strong>是一个<strong>文档节点</strong></li><li>每<strong>个HTML标签</strong>是一个<strong>元素节点</strong></li><li>包含在HTML元素中的文本是<strong>文本节点</strong></li><li>每个<strong>HTML属性</strong>是一个<strong>属性节点</strong></li><li><strong>注释</strong>属于<strong>注释节点</strong></li><li>HTML文档中的节点彼此间都存在关系，如一张族谱。</li></ul><p><strong>DOM</strong>表示文档作为树结构，其中HTML元素是树中的相关节点。</p><h3 id="DOM遍历"><a class="header-anchor" href="#DOM遍历"></a>DOM遍历</h3><p>jQuery 遍历，意为"移动"，用于根据其相对于其他元素的关系来"查找"（或选取）HTML 元素。以某项选择开始，并沿着这个选择移动，直到抵达期望的元素为止。</p><p>下图展示了一个家族树。通过<code> jQuery 遍历</code>，能够从当前元素开始，在家族树中向上移动（父节点），向下移动（子节点），水平移动（兄弟节点）。这种移动被称为对 DOM 进行遍历。</p><p><img src="http://r7lh60uut.hb-bkt.clouddn.com/jQuery%E9%81%8D%E5%8E%86.png" alt=""></p><p>图示解析：</p><ul><li><code>&lt;div&gt;</code> 元素是 <code>&lt;ul&gt;</code> 的父元素，同时是其中所有内容的祖先。</li><li><code>&lt;ul&gt;</code> 元素是 <code>&lt;li&gt;</code> 元素的父元素，同时是 <code>&lt;div&gt;</code> 的子元素</li><li>左边的<code> &lt;li&gt;</code> 元素是 <code>&lt;span&gt;</code> 的父元素，<code>&lt;ul&gt;</code> 的子元素，同时是 <code>&lt;div&gt;</code> 的后代。</li><li><code>&lt;span&gt;</code> 元素是<code> &lt;li&gt;</code> 的子元素，同时是 <code>&lt;ul&gt;</code> 和 <code>&lt;div&gt;</code> 的后代。</li><li>两个 <code>&lt;li&gt;</code> 元素是同胞（拥有相同的父元素）。</li><li>右边的<code> &lt;li&gt;</code> 元素是<code> &lt;b&gt;</code> 的父元素，<code>&lt;ul&gt;</code> 的子元素，同时是 <code>&lt;div&gt;</code> 的后代。</li><li><code>&lt;b&gt;</code> 元素是右边的 <code>&lt;li&gt;</code> 的子元素，同时是 <code>&lt;ul&gt;</code> 和<code> &lt;div&gt;</code> 的后代。</li></ul><p>常用遍历方法：</p><p><strong>向上遍历</strong> DOM 树：</p><ul><li><code>parent()</code>  返回被选元素的直接父元素</li><li><code>parents()</code>  返回被选元素的所有祖先元素,直到文档的根元素<code>&lt;html&gt;</code></li></ul><p><strong>向下遍历</strong> DOM 树</p><ul><li><code>children()</code>  返回被选元素的所有直接子元素</li><li><code>find()</code>  返回被选元素的后代元素</li></ul><p><strong>水平遍历</strong>DOM树</p><ul><li><code>siblings()</code>  返回被选元素的所有同胞元素</li><li><code>next()</code>  返回被选元素的下一个同胞元素</li><li><code>nextAll()</code>  返回被选元素的下面的所有同胞元素</li><li><code>prev()</code>  返回被选元素的上一个同胞元素</li><li><code>prevAll()</code>  返回被选元素的上面的所有同胞元素</li></ul><p><strong>eq() 方法</strong></p><p>返回被选元素中<strong>指定索引</strong>的元素.索引从0开始.</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//返回页面中的第3个div元素:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="删除元素"><a class="header-anchor" href="#删除元素"></a>删除元素</h3><p>如需删除元素和内容，一般可使用以下两个 jQuery 方法：</p><ul><li><strong>remove()</strong> - 删除被选元素.包括其子元素</li><li><strong>empty()</strong> - 从被选元素中删除子元素</li></ul><h2 id="事件处理"><a class="header-anchor" href="#事件处理"></a>事件处理</h2><p>指当 HTML 中发生某些事件时所调用的方法.通常写在<code>head</code>标签中</p><p>jQuery <strong>事件处理</strong>方法是 jQuery 中的<strong>核心函数</strong>。当用户<strong>执行某些操作</strong>即<strong>发生事件</strong>时,会执行处理函数.</p><h3 id="常见事件"><a class="header-anchor" href="#常见事件"></a>常见事件</h3><h4 id="鼠标事件"><a class="header-anchor" href="#鼠标事件"></a>鼠标事件</h4><ul><li><strong>click</strong>:  单击时发生</li><li><strong>dblclick</strong>:  双击元素时触发</li><li><strong>mouseenter</strong>:  当鼠标指针进入所选元素时触发</li><li><strong>mouseleave</strong>:  鼠标指针离开所选元素时触发</li><li><strong>mouseover</strong>:  当鼠标指针在所选元素上方悬停时触发</li></ul><h4 id="键盘事件"><a class="header-anchor" href="#键盘事件"></a>键盘事件</h4><ul><li><strong>keydown</strong>:  当按下键盘按键时会触发</li><li><strong>keyup</strong>:  当键盘按键被释放时会触发</li><li><strong>keypress</strong>：当按钮按下并抬起同一个按键</li></ul><h4 id="表单事件"><a class="header-anchor" href="#表单事件"></a>表单事件</h4><ul><li><strong>submit</strong>:  提交表单时触发</li><li><strong>change</strong>:  当表单元素的值发生改变时触发</li><li><strong>focus</strong>:  当表单元素获得焦点时触发</li><li><strong>blur</strong>:  当表单元素失去焦点时触发</li></ul><h4 id="文件事件"><a class="header-anchor" href="#文件事件"></a>文件事件</h4><ul><li><strong>ready</strong>:  当DOM加载完成以后触发</li><li><strong>resize</strong>:  当浏览器窗口大小改变时触发</li><li><strong>scroll</strong>:  当用户在指定的元素中滚动滚动条时触发</li></ul><p>例如，当用户输入时更改div的内容:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keydown</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#msg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="on-绑定事件"><a class="header-anchor" href="#on-绑定事件"></a>on()绑定事件</h3><p><strong>on()</strong> 方法在被选<strong>元素及子元素上</strong>添加<strong>一个或多个</strong>事件处理程序.</p><p>第1个参数是<strong>事件名称</strong>,当需要将处理函数绑定到<strong>多个事件</strong>上时,利用空格分隔事件名.</p><p>第2个参数是<strong>处理函数</strong>.</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click dblclick"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"单机或双击了p段落!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="off-解绑事件"><a class="header-anchor" href="#off-解绑事件"></a>off()解绑事件</h3><p><strong>off()方法通常用于移除通过on()方法添加的事件处理程序,参数为事件名.</strong></p><blockquote><p><strong>注意</strong>：移除指定的事件处理程序时，事件名参数必须匹配 on() 方法传递的参数。</p></blockquote><p>例如:解绑<code>div</code>元素通过on()方法绑定的事件:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hi there!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件对象"><a class="header-anchor" href="#事件对象"></a>事件对象</h3><p><strong>事件对象event作为参数传递给事件处理函数,其中包含与该事件相关的属性和方法</strong></p><ul><li><strong>event.type</strong>：获取事件的类型</li><li><strong>event.pageX</strong>和<strong>event.pageY</strong>：获取鼠标当前相对于页面的坐标（X和Y坐标）</li><li><strong>event.preventDefault()方法</strong>： 阻止默认行为</li><li><strong>event.stopPropagation()方法</strong>： 阻止事件冒泡</li><li><strong>event.which</strong>： 获取在鼠标单击时，单击的是鼠标的哪个键</li><li><strong>event.data</strong> 数据绑定事件时传入的任何数据</li><li><strong>event.currentTarget</strong>： 在事件冒泡过程中的当前DOM元素</li><li><strong>event.result</strong>： 包含由被指定事件触发的事件处理器返回的最后一个值</li></ul><p>例如，处理<code>&lt;a&gt;</code>元素上的click事件,使点击时提醒鼠标位置,并阻止打开href属性中提供的链接：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.w3cschool.cn<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>点击我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>pageX<span class="token punctuation">)</span><span class="token punctuation">;</span>  event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="触发事件"><a class="header-anchor" href="#触发事件"></a>触发事件</h3><p><strong>trigger()方法可以在jQuery代码中以编程方式触发被选元素的指定事件</strong></p><p>例如,触发一个点击事件,而不需要用户实际点击一个元素：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"点击了div!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>trigger()方法</strong>不能用来模仿<strong>本机浏览器事件</strong>，比如点击一个文件文本框。 只能处理<strong>jQuery事件系统中</strong>的事件。</p></blockquote><h2 id="效果"><a class="header-anchor" href="#效果"></a>效果</h2><h3 id="常用效果"><a class="header-anchor" href="#常用效果"></a>常用效果</h3><h4 id="显示-隐藏"><a class="header-anchor" href="#显示-隐藏"></a>显示/隐藏</h4><p>jQuery有一些易于实现的效果来创建动画,可以使用 <strong>hide()</strong> 和 <strong>show()</strong> 方法来<strong>隐藏</strong>和<strong>显示</strong> HTML 元素,</p><p>使用<strong>toggle()<strong>方法</strong>切换</strong>元素的显示/隐藏状态.</p><p><strong>hide / show / toggle</strong>方法可以带一个速度参数,以毫秒为单位指定动画速度</p><blockquote><p>hide / show / toggle 方法还有第二个可选参数可选，这是一个在动画完成后执行回调的方法</p></blockquote><p>例如为toggle方法传入一个1000毫秒的参数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="淡入-淡出"><a class="header-anchor" href="#淡入-淡出"></a>淡入/淡出</h4><p>jQuery提供了 <strong>fadeIn / fadeOut</strong> 方法，它将一个元素淡入和淡出显示</p><p><strong>fadeToggle</strong>()方法可以在淡入淡出中进行<strong>切换</strong>。</p><p>实例：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和<strong>toggle</strong>()一样，<strong>fadeToggle</strong>()也具有两个可选参数：速度和回调函数。</p><blockquote><p>用于<strong>淡入/淡出</strong>的另一种方法是<strong>fadeTo()</strong>，它将淡入/淡出到给定的<strong>不透明度</strong>（0和1之间的值）。 例如：$(“div”).fadeTo(1500,0.7);</p></blockquote><h4 id="向上-向下滑动"><a class="header-anchor" href="#向上-向下滑动"></a>向上/向下滑动</h4><p><strong>slideUp()</strong> 和 <strong>slideDown()</strong> 方法用于在元素上创建滑动效果,</p><p><strong>slideToggle()</strong> 方法在<strong>滑动效果</strong>之间<strong>切换</strong>，也有两个可选参数：<strong>速度</strong>和<strong>回调函数</strong>。</p><p>例如：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动画"><a class="header-anchor" href="#动画"></a>动画</h3><p>jQuery <strong>animate()</strong> 方法用于创建<strong>自定义动画</strong></p><blockquote><p>**语法：$(selector).animate({params},speed,callback); **</p></blockquote><ul><li><strong>params</strong>–必需，定义形成动画的 CSS 属性。属性定义为<strong>JSON格式</strong>的<strong>参数</strong>（“key”:“value”）</li><li><strong>speed</strong>–规定效果的<strong>时长</strong>。它可以取以下值：<strong>“slow”、“fast”</strong> 或<strong>毫秒</strong></li><li><strong>callback</strong> --动画完成后所执行的<strong>函数名称</strong></li></ul><p>例如，以下代码将div的width属性在1秒内改变到250px：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">'250px'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>请注意提供CSS参数的JSON格式。 在处理CSS属性时，JSON语法也被用于以前的模块。</p><blockquote><p>可以使用上述语法对任何CSS属性进行动画处理，但当与<strong>animate()</strong> 方法一起使用时，所有<strong>属性名称</strong>都必须是<strong>camel-cased</strong>（小驼峰命名法）.<br>将需要编写paddingLeft而不是padding-left，marginRight，而不是margin-right等</p></blockquote><h4 id="多个动画设置"><a class="header-anchor" href="#多个动画设置"></a>多个动画设置</h4><p>多个属性可以通过用<strong>逗号</strong>分隔来同时<strong>动画</strong>化</p><p>例如：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">'250px'</span><span class="token punctuation">,</span>  <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token string">'250px'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也可以定义<strong>相对值</strong>（该值相对于<strong>元素的当前值</strong>）。 通过将 += 或 -= 放在值的前面完成：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">'+=250px'</span><span class="token punctuation">,</span>  <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token string">'+=250px'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>要在动画完成之前停止动画，jQuery提供了**stop()**方法。</p></blockquote><h4 id="停止动画stop"><a class="header-anchor" href="#停止动画stop"></a>停止动画stop()</h4><p>jQuery <code>stop()</code>方法用于在动画或效果完成前对它们进行停止</p><p><code>stop()</code>方法适用于所有 jQuery 效果函数，包括滑动、淡入淡出和自定义动画</p><blockquote><p>语法：$(selector).stop(stopAll,goToEnd);</p></blockquote><ul><li><strong><code>stopAll</code></strong>–<code>可选</code>，规定是否应该<code>清除动画队列</code>。默认是 <code>false</code>，即仅停止活动的动画，允许任何排入队列的动画向后执行。</li><li><strong><code>goToEnd</code></strong> --规定是否立即完成<code>当前动画</code>。默认是 false。</li></ul><p>因此，默认地，stop() 会清除在被选元素上指定的当前动画。</p><h4 id="动画队列"><a class="header-anchor" href="#动画队列"></a>动画队列</h4><p>默认情况下，jQuery带有<strong>动画</strong>的<strong>队列</strong>功能。</p><p>这意味着如果你写了多个<strong>animate()</strong>，则jQuery会为这些方法创建一个**“内部”**队列。然后逐个运行动画。</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">var div = $("div");div.animate({opacity: 1});div.animate({height: '+=100px', width: '+=100px', top: '+=100px'}, 500);div.animate({height: '-=100px', width: '-=100px', left: '+=100px'}, 500);div.animate({height: '+=100px', width: '+=100px', top: '-=100px'}, 500);div.animate({height: '-=100px', width: '-=100px', left: '-=100px'}, 500);div.animate({opacity: 0.5});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上的animate() 方法将一个接一个地运行。</p><p><img src="http://r7lh60uut.hb-bkt.clouddn.com/%E5%8A%A8%E7%94%BB%E9%98%9F%E5%88%97.gif" alt=""></p><p>要<strong>操纵元素</strong>的<strong>位置</strong>，需要将元素的CSS位置属性设置为 <strong>relative，fixed</strong> 或 <strong>absolute</strong>。</p><blockquote><p><strong>animate()</strong> 方法，就像 <strong>hide / show / fade / slide</strong> 方法一样，可以使用可选的<strong>回调函数</strong>作为其参数，该参数在当前效果完成后执行。</p></blockquote><h4 id="动画的callback回调"><a class="header-anchor" href="#动画的callback回调"></a>动画的callback回调</h4><p><code>Callback 函数</code>在当前动画 100% 完成之后执行。</p><p>许多jQuery函数涉及动画.这些函数也许会将 <code>speed </code>或 <code>duration </code>作为可选参数</p><p>例子：$(“p”).hide(“slow”)</p><p><code>speed </code>或 <code>duration </code>参数可以设置许多不同的值，比如 “slow”, “fast”, “normal” 或毫秒数</p><p>例如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>隐藏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>我们段落内容，点击“隐藏”按钮我就会消失<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"段落现在被隐藏了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><p><img src="http://r7lh60uut.hb-bkt.clouddn.com/%E5%8A%A8%E7%94%BB%E7%9A%84callback%E5%9B%9E%E8%B0%83.png" alt=""></p><p>上面实例在<code>隐藏</code>效果<code>完全实现后</code>回调函数，也就是<code>警告框</code>会在隐藏效果完成后才会弹出：</p><h3 id="下拉式菜单"><a class="header-anchor" href="#下拉式菜单"></a>下拉式菜单</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>下拉菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submenu<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>选项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#submenu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的代码处理 id=“item” 元素的点击事件，并在500毫秒内打开/关闭子菜单。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax与Json笔记</title>
      <link href="/2022/02/20/ajax-yu-json-bi-ji/"/>
      <url>/2022/02/20/ajax-yu-json-bi-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前端开发的演变"><a class="header-anchor" href="#前端开发的演变"></a>前端开发的演变</h2><ul><li><p><strong>静态网页阶段</strong></p><p>没有数据交互,所有数据都由后端生成,前端只负责展示.如果需要更新页面内容,必须重新加载整个网页.</p><p>当只需要更新页面中部分内容时,也必须重载页面中的所有资源.用户体验差,还增加了服务器的负担.</p></li><li><p><strong>Ajax 阶段</strong></p><p><code>Ajax</code> 全称是 Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）,是一种用于创建动态网页的技术.</p><p>为了解决上述问题,04 年诞生了 Ajax 技术,让页面可以进行局部刷新,使前端不仅仅是展示页面,还能管理数据并与用户互动.</p><p>Ajax 技术指的是脚本独立向服务器请求数据,拿到数据后进行处理并更新网页.后端只是负责提供数据,其他事情都由前端处理,实现了 “获取数据 → 处理数据 → 展示数据” 的完整业务逻辑.</p><p>Ajax 可以提高系统性能,优化用户界面.很多框架以及代码库已将 Ajax 作为其必不可少的一个重要模块.</p></li></ul><h3 id="协议、域名、端口"><a class="header-anchor" href="#协议、域名、端口"></a>协议、域名、端口</h3><blockquote><p>协议、域名、端口指的是一个 URL 地址中的不同部分。</p></blockquote><p><strong>一个 URL 地址可以有以下几个组成部分：</strong><code>scheme</code><strong>: //</strong><code>host</code><strong>:</strong><code>post</code><strong>/</strong><code>path</code><strong>?</strong><code>query</code><strong>#</strong><code>fragment</code></p><ul><li><strong>scheme</strong>:  通信协议，一般为 http 、https；</li><li><strong>host</strong>:  域名；</li><li><strong>post</strong>:  端口号，此项为可选项，http 协议默认的端口号为 80，https 协议默认的端口号为 443；</li><li><strong>path</strong>:  路径，由 "/ "隔开的字符串；</li><li><strong>query</strong>:  查询参数，此项为可选项；</li><li><strong>fragment</strong>:  信息片段，用于指定网络资源中的某片断，此项为可选项；</li></ul><h2 id="Ajax-工作原理"><a class="header-anchor" href="#Ajax-工作原理"></a>Ajax 工作原理</h2><p>在 <code>客户端浏览器</code> 和 <code>服务器</code> 之间加了一个中间层：Ajax 引擎.由 Ajax 引擎独立向服务器请求数据，前端获取到 Ajax 返回的数据后，可以使用新数据来更新页面、或进行其它操作，使用户请求和服务器响应异步化，从而保证了在不刷新页面的前提下可以局部更新网页内容。</p><p><img src="http://r7lh60uut.hb-bkt.clouddn.com/AJAX%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.jpg" alt=""></p><h2 id="Ajax-的优缺点"><a class="header-anchor" href="#Ajax-的优缺点"></a>Ajax 的优缺点</h2><p><strong>优点：</strong></p><ol><li>页面无刷新更新，增强用户体验；</li><li>使用异步方式与服务器通信，响应能力更迅速；</li><li>可以将一些服务器工作转移到客户端，利用客户端资源来处理，减轻服务器和带宽的压力，节约空间和带宽租用成本；</li><li>技术标准化，并被浏览器广泛支持，不需要下载插件或者小程序；</li><li>Ajax 可使因特网应用程序更小、更快、更友好。</li></ol><p><strong>缺点：</strong></p><ol><li>Ajax 不支持浏览器 back 返回按钮；</li><li>有安全问题，Ajax 暴露了与服务器交互的细节；</li><li>对搜索引擎不友好；</li><li>破坏了程序的异常机制；</li><li>不容易调试。</li></ol><h2 id="同源策略"><a class="header-anchor" href="#同源策略"></a>同源策略</h2><p>同源策略是一种安全协议，是客户端脚本（尤其是 JavaScript）中重要的安全度量标准，</p><p>指<strong>一段脚本只能读取同一来源的窗口和文档的属性</strong>,</p><p>URL 地址中的 <strong>协议</strong>、<strong>域名</strong>、<strong>端口</strong> 三者 <strong>都</strong> 相同才能被称为 <strong>同源</strong>.</p><p><strong>例</strong>: <a href="https://www.baidu.cn">https://www.baidu.cn</a></p><ul><li><p><a href="https://www.w3cschool.cn/tutorial">https://www.w3cschool.cn/tutorial</a> 同源</p></li><li><p><a href="http://www.w3cschool.cn">http://www.w3cschool.cn</a> 不同源,协议不同</p></li><li><p><a href="https://pm.baidu.cn">https://pm.baidu.cn</a> 不同源,域名不同</p></li><li><p><a href="https://www.pm.w3cschool.cn:8822">https://www.pm.w3cschool.cn:8822</a> 不同源,端口不同</p></li></ul><h3 id="同源策略的必要性"><a class="header-anchor" href="#同源策略的必要性"></a>同源策略的必要性</h3><p>为了数据的安全性,浏览器需要有"同源策略".</p><p>若没有同源策略,黑客就可以在页面上任意请求后端数据,造成数据库内容被盗取,隐私数据泄漏等.</p><p><strong>在使用 Ajax 请求后端数据时,只能跟同源的后端接口进行数据交互</strong>,</p><p>即：后端接口的 URL 与发起 Ajax 请求的页面 URL 之间,需要满足同源策略.</p><p>不满足 “同源策略” 的请求会使浏览器报错.</p><blockquote><p>实现跨域请求的方式:</p></blockquote><p>在一些场景中，需要 Ajax 访问不同源的数据(称为跨域访问),这时需要后端服务器进行相应设置.如果服务器端支持 CORS，可以通过设置<code>Access-Control-Allow-Origin</code>来实现跨域。如果浏览器检测到相应的设置，就会允许 Ajax 进行跨域访问。</p><h2 id="XMLHttpRequest-类"><a class="header-anchor" href="#XMLHttpRequest-类"></a>XMLHttpRequest 类</h2><blockquote><p>Ajax 技术的核心是<code>XMLHttpRequest</code>类，简称 XHR，它允许脚本异步调用HTTP API。</p></blockquote><p>浏览器在<code>XMLHttpRequest</code>类上定义了 HTTP API，这个类的每个实例都表示一个 <strong>独立</strong> 的 <strong>请求/响应 对象</strong>，并且这个实例对象上的属性和方法允许 <strong>指定细节</strong> 和 <strong>提取响应数据</strong>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实例化</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="open-指定请求"><a class="header-anchor" href="#open-指定请求"></a>open 指定请求</h3><blockquote><p>创建 XMLHttpRequest 对象之后，发起 HTTP 请求的下一步是调用 XMLHttpRequest 对象的<code>open</code>方法，指定 HTTP 请求的两个必需部分：<strong>请求方法</strong> 和 <strong>URL</strong></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/statics/demosource/demo_get_json.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>解析：xhr.open(method, url, async)</strong></p><ul><li><p><strong>method</strong>:  用于指定 HTTP 请求的方法，不区分大小写；</p></li><li><p>可取的值包括：“GET”、“POST”、“HEAD”、“PUT”、“OPTIONS”、“DELETE”.</p></li><li><p><strong>url</strong>:  用于指定 HTTP 请求的 URL 地址，可以是 <strong>绝对URL</strong> 或 <strong>相对URL</strong>.</p></li><li><p><strong>async</strong>:  可选，指定脚本是否以异步方式调用此次 Ajax 请求;默认为 true,不阻塞后续脚本的执行.</p></li></ul><blockquote><p>允许脚本以异步的方式发起 Ajax 请求，是<code>XMLHttpRequest</code>技术的一个重要特性，可避免发生因网速慢等原因导致脚本代码阻塞、页面卡死现象；<br><code>open()</code>方法还可以有第四、第五个参数，分别用于 HTTP 请求访问认证的用户名和密码，使用它们需要在服务器做相应的配置，较为少用。</p></blockquote><h3 id="setRequestHeader-设置请求头"><a class="header-anchor" href="#setRequestHeader-设置请求头"></a>setRequestHeader 设置请求头</h3><blockquote><p>如果你的 HTTP 请求需要设置请求头，那么调用 open 方法之后的下个步骤就是设置它，使用的方法是：<code>setRequestHeader</code></p></blockquote><p><strong>示例</strong>:  POST 请求设置 “Content-Type” 头来指定请求主体的编码格式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//在open方法之后设置请求头:</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>解析：xhr.setRequestHeader(name, value)</strong></p><ul><li><strong>name</strong>:  请求头名称；</li><li><strong>value</strong>:  请求头的值。</li></ul><blockquote><p>如果对相同的头调用<code>setRequestHeader</code>多次，新值不会取代之前指定的值，相反，HTTP 请求将包含这个头的多个副本或将这个头指定多个值；<br>不能自己指定 “Content-Length”、“Date”、“Referer” 或 “User-Agent” 头，<code>XMLHttpRequest</code>将自动添加这些头而防止伪造它们。类似地，<code>XMLHttpRequest</code>对象还会自动处理 cookie、链接时间、字符集和编码判断，所以无法使用<code>setRequestHeader</code>方法设置它们。</p></blockquote><h3 id="send-发送请求主体"><a class="header-anchor" href="#send-发送请求主体"></a>send 发送请求主体</h3><blockquote><p>使用 XMLHttpRequest 发起 HTTP 请求的最后一步是指定可选的请求主体、并向服务器发送它，使用的方法是<code>send</code></p></blockquote><ul><li><strong>示例1:GET请求：</strong></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用GET请求时,由于它没有请求主体,所以send可以传递null或省略这个参数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>示例2:POST 请求</strong></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//使用POST请求时,可在send方法中指定请求主体,且应该匹配setRequestHeader方法所指定的"Content-Type" 头.</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="获取服务器响应"><a class="header-anchor" href="#获取服务器响应"></a>获取服务器响应</h2><blockquote><p>一个完整的 HTTP 响应由 状态码、响应头和 响应主体 组成，这三者都可以通过<code>XMLHttpRequest</code>对象提供的属性和方法获取。</p></blockquote><p>HTTP 请求时间的长短依赖于网速等原因,为了能够在 HTTP 响应准备就绪时得到通知，必须监听<code>XMLHttpRequest</code>对象上的<code>readystatechange</code>事件。</p><p>为了理解这个事件类型，需要先了解<code>readyState</code>属性，因为该事件监听的是<code>readyState</code>属性值的改变。</p><p><code>readyState</code>属性在 HTTP 请求过程中，会从 0 变到 4</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// readyState 初始为 0</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 监听 readyState 属性的改变</span>    <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/statics/demosource/demo_get_json.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="readyState-属性"><a class="header-anchor" href="#readyState-属性"></a>readyState 属性</h3><p><strong><code>readyState</code>属性是一个整数，它的值代表了不同的 HTTP 请求状态。</strong></p><ul><li>0：初始值，表示请求未初始化，<code>open</code>方法尚未调用；</li><li>1：启动请求，open 方法已经调用，但尚未调用 send 方法；</li><li>2：请求发送，已经调用 send 方法，但尚未接收到响应；</li><li>3：接收响应，已经接受到部分响应数据，主要是响应头；</li><li>4：HTTP 响应完成，已经接收到全部响应数据，而且可以在客户端使用。</li></ul><p>每次<code>readyState</code>属性值的改变都会触发<code>readystatechange</code>事件，属性值为 4 时表示 HTTP 的响应准备就绪.</p><p>因此，我们 Ajax 请求的代码通常都是这样的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// HTTP响应完成</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/statics/demosource/demo_get_json.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明：</strong></p><ul><li><code>readyState</code>的属性值只代表此时的 HTTP 请求处于哪个阶段：是发送了请求还是未发送请求，是只接收到了响应头还是响应完成；</li><li>“响应完成” 只代表 HTTP 请求结束，至于服务器的响应状态：是请求成功还是请求错误，又或者是服务器错误，需要通过 HTTP 状态码判断，它存储在<code>XMLhttpRequest</code>的<code>status</code>属性上；</li></ul><h3 id="status-属性"><a class="header-anchor" href="#status-属性"></a>status 属性</h3><blockquote><p><code>status</code>属性会以数字的形式保存服务器响应的 HTTP 状态码，诸如使用最频繁的 “200” 表示请求成功，“404” 表示 URL 不能匹配服务器上的任何资源。</p></blockquote><p>HTTP 状态码是用来表示网页服务器响应状态的 3 位数字代码，所有状态码的第一个数字代表了响应的五种状态之一：</p><ul><li>1xx：临时响应</li><li>2xx：成功</li><li>3xx：重定向</li><li>4xx：请求错误</li><li>5xx：服务器错误</li></ul><p><strong>2开头的状态码</strong> 与 <strong>304</strong>表示我们可以获取到 HTTP 响应数据。</p><p>2开头的状态码都表示请求成功，而 304 是对客户端可读取缓存的一种响应，同样能获取到 HTTP 的响应数据。</p><p><strong>示例</strong>:  Ajax 请求成功</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">// 如果http响应不成功直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取到响应数据，可执行一些请求成功的回调函数</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/statics/demosource/demo_get_json.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="responseText-属性"><a class="header-anchor" href="#responseText-属性"></a>responseText 属性</h3><blockquote><p><code>responseText</code>属性以字符串的形式存储了响应主体，即服务器的响应数据。</p></blockquote><p><strong>示例</strong>:  响应HTML文本或JSONN数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 当响应成功，获取响应数据,将数据赋值给本地</span>        oView<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>        <span class="token comment">// 如果相应的数据为JSON,就使用JSON.parse转换响应数据        </span>        <span class="token comment">//var res = JSON.parse(xhr.responseText);</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/statics/demosource/demo_get.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上，响应主体有时还可以从<code>XMLHttpRequest</code>对象的<code>response</code>、<code>responseXML</code>属性获取，它们的使用相对不频繁。</p><ul><li>responseText：无论返回的数据类型是什么，响应主体的内容都会保存在<code>responseText</code>属性中；</li><li>responseXML：只对 XML 数据有效，若响应主体是非 XML 数据，该属性值为<code>null</code>；</li><li>response：通常配合<code>responseType</code>使用。若指定了<code>XMLHttpRequest</code>实例的<code>responseType</code>属性，则将响应内容转换为该属性所指定的格式并返回，否则按默认情况处理。</li></ul><p><strong>示例</strong>:  response 与 responseType 的使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">"json"</span><span class="token punctuation">;</span><span class="token comment">// 指定响应主体的数据格式为 json</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        oTime<span class="token punctuation">.</span>innerText <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">.</span>date<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/statics/demosource/demo_get_json.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>值得注意的是</strong>:  若指定了<code>responseType</code>的值为非 “text” 或 非空（如示例3），则<code>responseText</code>属性就会失效，因此时的响应主体已不再是 “text” 文本形式，继续使用它获取响应主体浏览器会给出相应的报错信息.</p><h3 id="查询-HTTP-响应头"><a class="header-anchor" href="#查询-HTTP-响应头"></a>查询 HTTP 响应头</h3><blockquote><p>在<code>XMLHttpRequest</code>对象上，可通过<code>getAllResponseHeaders</code>和<code>getResponseHeader</code>方法查询响应头信息。</p></blockquote><ul><li><p><code>getAllResponseHeaders</code>方法返回可查询的全部响应头信息</p></li><li><p><code>getResponseHeader(headerName)</code>方法查询单一响应头信息,需要传入一个指定头名称的参数字符串</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">getAllResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回全部响应头信息</span>xhr<span class="token punctuation">.</span><span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回指定名称的单个响应头信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>说明</strong>:  由于<code>XMLHttpRequest</code>会自动处理 cookie，将 cookie 从<code>getAllResponseHeaders</code>方法返回的响应头集合中过滤掉，并且如果给<code>getResponseHeader</code>方法传递 “Set-Cookie” 或 “Set-Cookie2”，则返回 null。</p><h3 id="Ajax-的同步响应"><a class="header-anchor" href="#Ajax-的同步响应"></a>Ajax 的同步响应</h3><p><code>XMLHttpRequest</code>对象的<code>open</code>方法的第三个参数用来规定脚本是否以 异步方式 调用 Ajax 请求；</p><p>准确地说，这个参数用来规定 脚本是否以异步方式 <strong>处理 HTTP 响应</strong>。</p><blockquote><p>由于 HTTP 请求的性质，异步处理 HTTP 响应是最好的方式,但如果将<code>false</code>作为第三个参数传递给<code>open</code>方法，那么调用<code>send</code>方法将 阻塞 后续脚本的执行 <strong>直到 HTTP 请求完成</strong>。此时不再需要监听<code>readystatechange</code>事件，因为<code>send</code>方法后面的代码一定会等到 HTTP 请求完成后再执行。</p></blockquote><p><strong>应该避免让<code>XMLHttpRequest</code>实现同步请求.因为 JavaScript 脚本是单线程的，当<code>send</code>方法阻塞脚本时，往往会导致整个页面被冻结.如果连接的服务器响应慢、网速慢等，那么用户的操作将受到影响.</strong></p><h3 id="abort-中止请求"><a class="header-anchor" href="#abort-中止请求"></a>abort 中止请求</h3><blockquote><p>若 HTTP 请求的时间超出预期，可以调用<code>XMLHttpRequest</code>对象上的<code>abort</code>方法来中止 HTTP 请求。</p></blockquote><p><strong>示例</strong>:  实现超时</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 用于存储定时器标识</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 未超时则取消定时器</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/statics/demosource/demo_get_json.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2秒后中止此次 GET 请求</span>timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    xhr<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GET请求"><a class="header-anchor" href="#GET请求"></a>GET请求</h2><h3 id="GET-请求的数据传递"><a class="header-anchor" href="#GET-请求的数据传递"></a>GET 请求的数据传递</h3><blockquote><p>GET 请求一般用于信息获取，它没有请求主体，而是使用 URL 传递参数（即：传递数据给后台）。</p></blockquote><p>GET 传递参数的方式，分两步：</p><ol><li>对所需发送的数据(具有名称和值)执行普通的 URL 编码并用 “&amp;” 拼接,如 “name=tom&amp;age=18”；</li><li>由于参数附加在 URL 地址后，因此最前面需添加 “?”,表示 URL 的 查询参数 开始.</li></ol><p>示例：传递表单数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// GET请求的后端接口</span><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">"/statics/demosource/demo_get_json.php"</span><span class="token punctuation">;</span><span class="token comment">// 获取用户输入的表单数据</span><span class="token keyword">var</span> country <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"country"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span>    city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token comment">// 调整参数格式并加入URL尾</span><span class="token keyword">var</span> queryURL <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> <span class="token string">"country="</span> <span class="token operator">+</span> country <span class="token operator">+</span> <span class="token string">"&amp;city="</span> <span class="token operator">+</span> city<span class="token punctuation">;</span><span class="token comment">// 发起GET请求</span><span class="token function">ajaxGet</span><span class="token punctuation">(</span>queryURL<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>因 JavaScript 对象数据是键值对的形式，因此在 Ajax 的应用中，传递的数据通常直接来自一个 JavaScript 对象，这时只需遍历这个 JavaScript 对象，将每一个键值对按 “名称=值” 的形式进行拼接即可。</p></blockquote><h3 id="GET-请求的缓存问题"><a class="header-anchor" href="#GET-请求的缓存问题"></a>GET 请求的缓存问题</h3><blockquote><p>GET 请求的结果会被浏览器缓存.这时，如果 GET 请求的 URL 不变，那么请求的结果就是浏览器的缓存</p></blockquote><p><strong>解决方法</strong>:  实时改变 GET 请求的 URL，只要 URL 不同，就不会取到浏览器的缓存结果。</p><p><strong>具体做法</strong>:  在 URL 末尾添加时间戳参数,达到实时改变请求 URL 的目的.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在请求参数的最后附加精确到毫秒值时间戳参数:</span><span class="token keyword">var</span> queryURL <span class="token operator">=</span> <span class="token string">"/statics/demosource/demo_get_json.php"</span> <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> <span class="token string">"t="</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="POST请求"><a class="header-anchor" href="#POST请求"></a>POST请求</h2><blockquote><p>POST 请求一般用于修改服务器上的资源，它需要发送一个请求主体，客户端传递给服务器的数据就包含在这个请求主体中。</p></blockquote><p><code>"Content-Type"</code>请求头用于设置请求主体的编码格式。</p><h3 id="表单编码的-POST-请求"><a class="header-anchor" href="#表单编码的-POST-请求"></a>表单编码的 POST 请求</h3><ol><li>对所需发送的数据（具有名称和值）执行普通的 URL 编码，即：像 GET 请求那样拼接为 名/值 对的形式；</li><li>将<code>"Content-Type"</code>请求头的值设置为<code>"application/x-www-form-urlencoded"</code>。</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取用户输入的表单数据</span><span class="token keyword">var</span> country <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"country"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span>    city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token comment">// 将数据拼接为 名/值对 的形式</span><span class="token keyword">var</span> query <span class="token operator">=</span> <span class="token string">"country="</span> <span class="token operator">+</span> country <span class="token operator">+</span> <span class="token string">"&amp;city="</span> <span class="token operator">+</span> city<span class="token punctuation">;</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ... ... 省略事件处理程序</span><span class="token punctuation">}</span><span class="token comment">// 指定 POST 请求</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"/statics/demosource/demo_post_json.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置请求主体的编码方法</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 发送请求主体（数据）</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON-编码的-POST-请求"><a class="header-anchor" href="#JSON-编码的-POST-请求"></a>JSON 编码的 POST 请求</h3><blockquote><p>使用<code>JSON.stringify</code>原生 API 即可实现 JSON 编码，比表单编码更加快捷。</p></blockquote><p>关键步骤：</p><ol><li><code>"Content-Type"</code>请求头的值需要为<code>"application/json"</code>；</li><li>对请求主体进行序列化，在 JavaScript 中可使用<code>JSON.stringify</code>完成这步操作。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取用户输入的表单数据</span><span class="token keyword">var</span> country <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"country"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span>    city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token comment">// 将数据转换为 JavaScript 对象</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">country</span> <span class="token operator">:</span> country<span class="token punctuation">,</span>    <span class="token literal-property property">city</span> <span class="token operator">:</span> city<span class="token punctuation">}</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ... ... 省略事件处理程序</span><span class="token punctuation">}</span><span class="token comment">// 指定 POST 请求</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"/statics/demosource/demo_json_data.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置请求主体的编码方法</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 编码请求主体并发送</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GET与POST的对比"><a class="header-anchor" href="#GET与POST的对比"></a>GET与POST的对比</h2><p><strong>GET 请求：</strong></p><ol><li>一般用于信息获取：通过发送一个请求来取得服务器上的资源；</li><li>数据包含在 URL 地址中；</li><li>数据量受 URL 的长度限制；</li><li>不安全：浏览器的 URL 可以直接看到，明文传输；</li><li>GET 请求会被缓存；</li><li>GET 没有请求主体，请求速度相对较快。</li></ol><p><strong>POST 请求：</strong></p><ol><li>一般用于修改服务器上的资源：向指定资源提交数据，后端处理请求后往往会导致服务器 建立新的资源 或 修改已有资源；</li><li>数据包含在请求主体中；</li><li>没有数据量限制，可在服务器的配置里进行限制；</li><li>只是比 GET 安全，实际上也是不安全的：可通过开发者工具或者抓包看到，明文传输；</li><li>POST 请求不会被缓存；</li><li>POST 相对稳定、可靠：可发送包含未知字符的内容。</li></ol><blockquote><p>HTTP 协议里并没有限制 GET 和 POST 的长度，GET 的最大长度限制是因为浏览器和 Web 服务器对 URL 的长度限制，不同的浏览器和 Web 服务器限制的最大长度不一样，它们所限制的是整个 URL 的长度，而不仅仅是查询参数的数据长度。</p></blockquote><h2 id="jQuery-中的-Ajax"><a class="header-anchor" href="#jQuery-中的-Ajax"></a>jQuery 中的 Ajax</h2><blockquote><p>jQuery 是一个 JavaScript 工具库，它封装了 JavaScript 常用的功能代码，包括我们刚刚学完的 Ajax。</p></blockquote><p>使用原生 JavaScript 代码实现的 Ajax 请求 繁琐且重复度高. jQuery 中的 Ajax封装度高,且提供了多种接口,方便发送 Ajax 请求.</p><p><strong>jQuery 中，Ajax 常见的请求方式有以下几种：</strong></p><ul><li><code>$.ajax(url, options)</code></li><li><code>$.get(url, data, callback, dataType)</code></li><li><code>$.post(url, data, callback, dataType)</code></li><li><code>$.getJSON(url, data, callback)</code></li><li><code>$.getScript(url, callback)</code></li><li>jQuery元素<code>.load(url, data, callback)</code></li></ul><p>示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 使用jQuery发起ajax请求</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">"/statics/demosource/demo_get_json.php"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token comment">//请求类型</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>    <span class="token comment">//要发送的数据</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">country</span><span class="token operator">:</span> country<span class="token punctuation">,</span>        <span class="token literal-property property">city</span><span class="token operator">:</span> city    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//数据格式</span>    <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>    <span class="token comment">//请求成功后执行(res为响应成功返回的数据).</span>    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        oIpt_country<span class="token punctuation">.</span>innerText <span class="token operator">=</span> res<span class="token punctuation">.</span>params<span class="token punctuation">.</span>country<span class="token punctuation">;</span>        oIpt_city<span class="token punctuation">.</span>innerText <span class="token operator">=</span> res<span class="token punctuation">.</span>params<span class="token punctuation">.</span>city<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//请求失败后执行(这里的res为响应失败返回的数据)</span>    <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请求失败："</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//AJAX结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fetch"><a class="header-anchor" href="#fetch"></a>fetch</h2><blockquote><p>Fetch API 是随 ES6 发展而出现的一个 JavaScript 原生接口，与 Ajax 一样允许开发者异步发起 HTTP 请求，但却以更加简单明了的调用方式、基于 Promise 的数据处理方式被称作是 Ajax 的替代品。</p></blockquote><p><strong>示例：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/statics/demosource/demo_json_data.php"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>    <span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">"Content-Type"</span> <span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span>ok <span class="token operator">?</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    oIpt_country<span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">.</span>country<span class="token punctuation">;</span>    oIpt_city<span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">.</span>city<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请求失败："</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Fetch 与 Promise 都是 ES6 提出的 API,在不支持的浏览器中使用就需要依次引入 es6-promise与 Fetch Polyfill</p><blockquote><p><code>XMLHttpRequest</code>对象其实就是 HTTP 规范在客户端 JavaScript 中的实现，一次 HTTP 请求，就对应着一个<code>XMLHttpRequest</code>实例，在这个实例上，你可以取到 HTTP 协议中规定的各种协议属性.</p></blockquote><h2 id="JSON简介"><a class="header-anchor" href="#JSON简介"></a>JSON简介</h2><h3 id="JSON-是什么"><a class="header-anchor" href="#JSON-是什么"></a>JSON 是什么</h3><blockquote><p>JSON = JavaScript Object Notation，意思是：JavaScript 对象表示法，是一种轻量级的数据交换格式。</p></blockquote><p>在 JSON 出现之前,用 XML在网络上交换数据通常要加 DTD、XSD、XPath、XSLT 等复杂规范, 过于繁琐、冗长.</p><p>为解决这个问题，出现了 JSON 这种轻量级的数据交换格式.与 XML 相比,它数据结构更清晰,易于阅读和编写,同时也易于机器解析和生成，有效地提升了网络传输数据的效率.</p><h3 id="JSON-与-JavaScript-的关系"><a class="header-anchor" href="#JSON-与-JavaScript-的关系"></a>JSON 与 JavaScript 的关系</h3><p>JSON 是 JavaScript 的子集，它利用了 JavaScript 中的一些模式来表示结构化数据，是在 JavaScript 中读写结构化数据的更好方式。</p><p><strong>JSON是一种独立于编程语言的数据格式</strong>,并不是只有 JavaScript 才能使用 JSON,很多编程语言都有针对 JSON 的解析器和序列化器.</p><h3 id="JSON-语法规则"><a class="header-anchor" href="#JSON-语法规则"></a>JSON 语法规则</h3><p>JSON 的语法可以表示以下三种类型的值：</p><ul><li><strong>简单值</strong>:  使用与 JavaScript 相同的语法，可在 JSON 中表示<code>number</code>、<code>string</code>、<code>boolean</code> 与 <code>null</code>，但不支持<code>undefined</code>；</li><li><strong>对象</strong>:  对象作为一种复杂数据类型， 表示的是一组无序的键值对，而每个键值对中的值可以是简单值，也可以是复杂数据类型的值；</li><li><strong>数组</strong>:  数组也是一种复杂数据类型，表示一组有序的值的列表，数组的值也可以是任意类型 —— 简单值、对象 或 数组。</li></ul><p><strong>JSON 字符串必须使用 双引号.单引号会导致语法错误.</strong></p><p>在实际应用中JSON 更多地用来表示更复杂的数据结构.</p><h2 id="JSON-对象"><a class="header-anchor" href="#JSON-对象"></a>JSON 对象</h2><p><strong>JSON 表示对象</strong>：属性值可以是简单值，也可以是复杂类型值</p><p><strong>与 JavaScript 的字面量相比，JSON 对象的属性名必须加双引号</strong></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"Alan"</span><span class="token punctuation">,</span>    <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">,</span>    <span class="token property">"child"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"Tim"</span><span class="token punctuation">,</span>        <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">7</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON-数组"><a class="header-anchor" href="#JSON-数组"></a>JSON 数组</h3><p>在 JSON 中，可以采用与JavaScript同样的语法来表示数组</p><p>把数组和对象结合起来，可以构成更复杂的数据集合</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string-property property">"title"</span> <span class="token operator">:</span> <span class="token string">"Professional JavaScript"</span><span class="token punctuation">,</span>        <span class="token string-property property">"authors"</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Nicholas C. Zakas"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">"year"</span> <span class="token operator">:</span> <span class="token number">2011</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string-property property">"title"</span> <span class="token operator">:</span> <span class="token string">"Professional Ajax"</span><span class="token punctuation">,</span>                 <span class="token string-property property">"authors"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"Nicholas C. Zakas"</span><span class="token punctuation">,</span>            <span class="token string">"Jeremy McPeak"</span><span class="token punctuation">,</span>            <span class="token string">"Joe Fawcett"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token number">2008</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JavaScript-内置的-JSON-对象"><a class="header-anchor" href="#JavaScript-内置的-JSON-对象"></a>JavaScript 内置的 JSON 对象</h3><blockquote><p>ECMAScript 5 定义了一个原生的 JSON 对象，可把 JavaScript 对象序列化为 JSON 字符串，或把 JSON 字符串解析为原生的 JavaScript 值。</p></blockquote><p><strong>常用方法：</strong></p><ul><li><code>JSON.stringify()</code>： JS对象   —序列化—&gt;JSON 字符串；</li><li><code>JSON.parse()</code>：         JSON字符串-----解析----&gt;JS对象。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Ajax </tag>
            
            <tag> Json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/02/20/hello-world/"/>
      <url>/2022/02/20/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>欢迎来到丁兆龙的个人博客, 本站点基于<code>Hexo</code>框架进行搭建.</p><p>本站地址:  <a href="https://visitor23.github.io/">GitHub Pages托管</a>  ,  <a href="https://dzl.vercel.app">Vercel托管</a>(<strong>推荐访问</strong>)👍</p><p>Hexo及相关教程传送门👉  <a href="https://github.com/hexojs/hexo">GitHub地址</a>, <a href="https://hexo.io/zh-cn/">中文官网</a>, <a href="https://easyhexo.com/">相关教程👨‍💻</a>.</p><p>静态网页托管服务👇</p><p>👉  <a href="https://pages.github.com/">GitHub Pages</a> (速度略慢) ,  <a href="https://zhuanlan.zhihu.com/p/58254227">相关教程👨‍💻</a></p><p>👉  <a href="https://vercel.com/dashboard">Vercel</a> (<strong>推荐</strong>),  <a href="https://zhuanlan.zhihu.com/p/347990778">相关教程👨‍💻</a></p><p>本站的Hexo主题:<code>hexo-theme-matery</code>, 项目地址及教程👉  <a href="https://github.com/blinkfox/hexo-theme-matery">GitHub地址</a> ,  <a href="https://easyhexo.com/2-Theme-use-and-config/2-14-hexo-theme-matery/">相关教程👨‍💻</a>.</p><p>Hexo插件hexo-tag-aplayer👉  <a href="https://github.com/MoePlayer/hexo-tag-aplayer">GitHub地址</a>,  <a href="https://easyhexo.com/3-Plugins-use-and-config/3-1-hexo-tag-aplayer/">相关教程👨‍💻</a></p><p>图片对象存储👉  <a href="https://console.cloud.tencent.com/cos">腾讯云</a></p></blockquote><blockquote><p>听首歌吧</p></blockquote>    <div id="aplayer-QmXNrwky" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="27783537" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div><h2 id="Hexo"><a class="header-anchor" href="#Hexo"></a>Hexo</h2><p>Hexo是一款基于Node.js的<strong>静态博客框架</strong>, 依赖少,简单易用, 部署方便, 且支持MarkDown语法,</p><p>可以方便的生成静态网页托管. 是个人博客搭建的优秀框架之一.</p><h2 id="GitHub-Pages"><a class="header-anchor" href="#GitHub-Pages"></a>GitHub Pages</h2><p>GitHub Pages 是一个<strong>静态站点托管服务</strong>, 只需编辑, 推送到GitHub仓库, 对页面的更改就会生效.</p><h2 id="Vercel"><a class="header-anchor" href="#Vercel"></a>Vercel</h2><p>与GitHub Pages类似, Vercel提供针对个人的免费的静态网站部署服务, 访问速度相对良好, 且支持关联到GitHub仓库.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用emoji表情</title>
      <link href="/2022/02/20/md-emoji-biao-qing-yi-lan/"/>
      <url>/2022/02/20/md-emoji-biao-qing-yi-lan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="目录"><a class="header-anchor" href="#目录"></a>目录</h2><ul><li><a href="#%E4%BA%BA%E7%89%A9">人物</a></li><li><a href="#%E8%87%AA%E7%84%B6">自然</a></li><li><a href="#%E4%BA%8B%E7%89%A9">事物</a></li><li><a href="#%E5%9C%B0%E7%82%B9">地点</a></li><li><a href="#%E7%AC%A6%E5%8F%B7">符号</a></li></ul><h2 id="人物"><a class="header-anchor" href="#人物"></a>人物</h2><table><thead><tr><th>😂 <code>:joy:</code></th><th>😄 <code>:smile:</code></th><th>😆 <code>:laughing:</code></th></tr></thead><tbody><tr><td>😊 <code>:blush:</code></td><td>😃 <code>:smiley:</code></td><td>☺️ <code>:relaxed:</code></td></tr><tr><td>😏 <code>:smirk:</code></td><td>😍 <code>:heart_eyes:</code></td><td>😘 <code>:kissing_heart:</code></td></tr><tr><td>😚 <code>:kissing_closed_eyes:</code></td><td>😳 <code>:flushed:</code></td><td>😌 <code>:relieved:</code></td></tr><tr><td>😆 <code>:satisfied:</code></td><td>😁 <code>:grin:</code></td><td>😉 <code>:wink:</code></td></tr><tr><td>😜 <code>:stuck_out_tongue_winking_eye:</code></td><td>😝 <code>:stuck_out_tongue_closed_eyes:</code></td><td>😀 <code>:grinning:</code></td></tr><tr><td>😗 <code>:kissing:</code></td><td>😙 <code>:kissing_smiling_eyes:</code></td><td>😛 <code>:stuck_out_tongue:</code></td></tr><tr><td>😴 <code>:sleeping:</code></td><td>😟 <code>:worried:</code></td><td>😦 <code>:frowning:</code></td></tr><tr><td>😧 <code>:anguished:</code></td><td>😮 <code>:open_mouth:</code></td><td>😬 <code>:grimacing:</code></td></tr><tr><td>😕 <code>:confused:</code></td><td>😯 <code>:hushed:</code></td><td>😑 <code>:expressionless:</code></td></tr><tr><td>😒 <code>:unamused:</code></td><td>😅 <code>:sweat_smile:</code></td><td>😓 <code>:sweat:</code></td></tr><tr><td>😥 <code>:disappointed_relieved:</code></td><td>😩 <code>:weary:</code></td><td>😔 <code>:pensive:</code></td></tr><tr><td>😞 <code>:disappointed:</code></td><td>😖 <code>:confounded:</code></td><td>😨 <code>:fearful:</code></td></tr><tr><td>😰 <code>:cold_sweat:</code></td><td>😣 <code>:persevere:</code></td><td>😢 <code>:cry:</code></td></tr><tr><td>😱 <code>:scream:</code></td><td>😲 <code>:astonished:</code></td><td>😫 <code>:tired_face:</code></td></tr><tr><td>😠 <code>:angry:</code></td><td>😡 <code>:rage:</code></td><td>😤 <code>:triumph:</code></td></tr><tr><td>😪 <code>:sleepy:</code></td><td>😋 <code>:yum:</code></td><td>😷 <code>:mask:</code></td></tr><tr><td>😎 <code>:sunglasses:</code></td><td>😵 <code>:dizzy_face:</code></td><td>👿 <code>:imp:</code></td></tr><tr><td>😈 <code>:smiling_imp:</code></td><td>😐 <code>:neutral_face:</code></td><td>😶 <code>:no_mouth:</code></td></tr><tr><td>😇 <code>:innocent:</code></td><td>👽 <code>:alien:</code></td><td>💛 <code>:yellow_heart:</code></td></tr><tr><td>💙 <code>:blue_heart:</code></td><td>💜 <code>:purple_heart:</code></td><td>❤️ <code>:heart:</code></td></tr><tr><td>💚 <code>:green_heart:</code></td><td>💔 <code>:broken_heart:</code></td><td>💓 <code>:heartbeat:</code></td></tr><tr><td>💗 <code>:heartpulse:</code></td><td>💕 <code>:two_hearts:</code></td><td>💞 <code>:revolving_hearts:</code></td></tr><tr><td>💘 <code>:cupid:</code></td><td>💖 <code>:sparkling_heart:</code></td><td>✨ <code>:sparkles:</code></td></tr><tr><td>⭐ <code>:star:</code></td><td>🌟 <code>:star2:</code></td><td>💫 <code>:dizzy:</code></td></tr><tr><td>💥 <code>:boom:</code></td><td>💥 <code>:collision:</code></td><td>💢 <code>:anger:</code></td></tr><tr><td>❗ <code>:exclamation:</code></td><td>❓ <code>:question:</code></td><td>❕ <code>:grey_exclamation:</code></td></tr><tr><td>❔ <code>:grey_question:</code></td><td>💤 <code>:zzz:</code></td><td>💨 <code>:dash:</code></td></tr><tr><td>💦 <code>:sweat_drops:</code></td><td>🎶 <code>:notes:</code></td><td>🎵 <code>:musical_note:</code></td></tr><tr><td>🔥 <code>:fire:</code></td><td>💩 <code>:hankey:</code></td><td>💩 <code>:poop:</code></td></tr><tr><td>💩 <code>:shit:</code></td><td>👍 <code>:+1:</code></td><td>👍 <code>:thumbsup:</code></td></tr><tr><td>👎 <code>:-1:</code></td><td>👎 <code>:thumbsdown:</code></td><td>👌 <code>:ok_hand:</code></td></tr><tr><td>👊 <code>:punch:</code></td><td>👊 <code>:facepunch:</code></td><td>✊ <code>:fist:</code></td></tr><tr><td>✌️ <code>:v:</code></td><td>👋 <code>:wave:</code></td><td>✋ <code>:hand:</code></td></tr><tr><td>✋ <code>:raised_hand:</code></td><td>👐 <code>:open_hands:</code></td><td>☝️ <code>:point_up:</code></td></tr><tr><td>👇 <code>:point_down:</code></td><td>👈 <code>:point_left:</code></td><td>👉 <code>:point_right:</code></td></tr><tr><td>🙌 <code>:raised_hands:</code></td><td>🙏 <code>:pray:</code></td><td>👆 <code>:point_up_2:</code></td></tr><tr><td>👏 <code>:clap:</code></td><td>💪 <code>:muscle:</code></td><td>🤘 <code>:metal:</code></td></tr><tr><td>🖕 <code>:fu:</code></td><td>🚶 <code>:walking:</code></td><td>🏃 <code>:runner:</code></td></tr><tr><td>🏃 <code>:running:</code></td><td>👫 <code>:couple:</code></td><td>👪 <code>:family:</code></td></tr><tr><td>👬 <code>:two_men_holding_hands:</code></td><td>👭 <code>:two_women_holding_hands:</code></td><td>💃 <code>:dancer:</code></td></tr><tr><td>👯 <code>:dancers:</code></td><td>🙆‍♀️ <code>:ok_woman:</code></td><td>🙅 <code>:no_good:</code></td></tr><tr><td>💁 <code>:information_desk_person:</code></td><td>🙋 <code>:raising_hand:</code></td><td>👰‍♀️ <code>:bride_with_veil:</code></td></tr><tr><td>🙇 <code>:bow:</code></td><td>💑 <code>:couple_with_heart:</code></td><td>💆 <code>:massage:</code></td></tr><tr><td>💇 <code>:haircut:</code></td><td>💅 <code>:nail_care:</code></td><td>👦 <code>:boy:</code></td></tr><tr><td>👧 <code>:girl:</code></td><td>👩 <code>:woman:</code></td><td>👨 <code>:man:</code></td></tr><tr><td>👶 <code>:baby:</code></td><td>👵 <code>:older_woman:</code></td><td>👴 <code>:older_man:</code></td></tr><tr><td>💌 <code>:love_letter:</code></td><td>👲 <code>:man_with_gua_pi_mao:</code></td><td>👳‍♂️ <code>:man_with_turban:</code></td></tr><tr><td>👷 <code>:construction_worker:</code></td><td>👮 <code>:cop:</code></td><td>👼 <code>:angel:</code></td></tr><tr><td>👸 <code>:princess:</code></td><td>😺 <code>:smiley_cat:</code></td><td>😸 <code>:smile_cat:</code></td></tr><tr><td>😻 <code>:heart_eyes_cat:</code></td><td>😽 <code>:kissing_cat:</code></td><td>😼 <code>:smirk_cat:</code></td></tr><tr><td>🙀 <code>:scream_cat:</code></td><td>😿 <code>:crying_cat_face:</code></td><td>😹 <code>:joy_cat:</code></td></tr><tr><td>😾 <code>:pouting_cat:</code></td><td>👹 <code>:japanese_ogre:</code></td><td>👺 <code>:japanese_goblin:</code></td></tr><tr><td>🙈 <code>:see_no_evil:</code></td><td>🙉 <code>:hear_no_evil:</code></td><td>🙊 <code>:speak_no_evil:</code></td></tr><tr><td>💂‍♂️ <code>:guardsman:</code></td><td>💀 <code>:skull:</code></td><td>🐾 <code>:feet:</code></td></tr><tr><td>👄 <code>:lips:</code></td><td>💋 <code>:kiss:</code></td><td>💧 <code>:droplet:</code></td></tr><tr><td>👂 <code>:ear:</code></td><td>👀 <code>:eyes:</code></td><td>👃 <code>:nose:</code></td></tr><tr><td>👅 <code>:tongue:</code></td><td>💭 <code>:thought_balloon:</code></td><td>👤 <code>:bust_in_silhouette:</code></td></tr><tr><td>👥 <code>:busts_in_silhouette:</code></td><td>💬 <code>:speech_balloon:</code></td><td>😭 <code>:sob:</code></td></tr></tbody></table><h2 id="自然"><a class="header-anchor" href="#自然"></a>自然</h2><table><thead><tr><th>☀️ <code>:sunny:</code></th><th>☔ <code>:umbrella:</code></th><th>☁️ <code>:cloud:</code></th></tr></thead><tbody><tr><td>❄️ <code>:snowflake:</code></td><td>⛄ <code>:snowman:</code></td><td>⚡ <code>:zap:</code></td></tr><tr><td>🌀 <code>:cyclone:</code></td><td>🌁 <code>:foggy:</code></td><td>🌊 <code>:ocean:</code></td></tr><tr><td>🐱 <code>:cat:</code></td><td>🐶 <code>:dog:</code></td><td>🐭 <code>:mouse:</code></td></tr><tr><td>🐹 <code>:hamster:</code></td><td>🐰 <code>:rabbit:</code></td><td>🐺 <code>:wolf:</code></td></tr><tr><td>🐸 <code>:frog:</code></td><td>🐯 <code>:tiger:</code></td><td>🐨 <code>:koala:</code></td></tr><tr><td>🐻 <code>:bear:</code></td><td>🐷 <code>:pig:</code></td><td>🐽 <code>:pig_nose:</code></td></tr><tr><td>🐮 <code>:cow:</code></td><td>🐗 <code>:boar:</code></td><td>🐵 <code>:monkey_face:</code></td></tr><tr><td>🐒 <code>:monkey:</code></td><td>🐴 <code>:horse:</code></td><td>🐎 <code>:racehorse:</code></td></tr><tr><td>🐫 <code>:camel:</code></td><td>🐑 <code>:sheep:</code></td><td>🐘 <code>:elephant:</code></td></tr><tr><td>🐼 <code>:panda_face:</code></td><td>🐍 <code>:snake:</code></td><td>🐦 <code>:bird:</code></td></tr><tr><td>🐤 <code>:baby_chick:</code></td><td>🐥 <code>:hatched_chick:</code></td><td>🐣 <code>:hatching_chick:</code></td></tr><tr><td>🐔 <code>:chicken:</code></td><td>🐧 <code>:penguin:</code></td><td>🐢 <code>:turtle:</code></td></tr><tr><td>🐛 <code>:bug:</code></td><td>🐝 <code>:honeybee:</code></td><td>🐜 <code>:ant:</code></td></tr><tr><td>🪲 <code>:beetle:</code></td><td>🐌 <code>:snail:</code></td><td>🐙 <code>:octopus:</code></td></tr><tr><td>🐠 <code>:tropical_fish:</code></td><td>🐟 <code>:fish:</code></td><td>🐳 <code>:whale:</code></td></tr><tr><td>🐋 <code>:whale2:</code></td><td>🐬 <code>:dolphin:</code></td><td>🐄 <code>:cow2:</code></td></tr><tr><td>🐏 <code>:ram:</code></td><td>🐀 <code>:rat:</code></td><td>🐃 <code>:water_buffalo:</code></td></tr><tr><td>🐅 <code>:tiger2:</code></td><td>🐇 <code>:rabbit2:</code></td><td>🐉 <code>:dragon:</code></td></tr><tr><td>🐐 <code>:goat:</code></td><td>🐓 <code>:rooster:</code></td><td>🐕 <code>:dog2:</code></td></tr><tr><td>🐖 <code>:pig2:</code></td><td>🐁 <code>:mouse2:</code></td><td>🐂 <code>:ox:</code></td></tr><tr><td>🐲 <code>:dragon_face:</code></td><td>🐡 <code>:blowfish:</code></td><td>🐊 <code>:crocodile:</code></td></tr><tr><td>🐪 <code>:dromedary_camel:</code></td><td>🐆 <code>:leopard:</code></td><td>🐈 <code>:cat2:</code></td></tr><tr><td>🐩 <code>:poodle:</code></td><td>🐾 <code>:paw_prints:</code></td><td>💐 <code>:bouquet:</code></td></tr><tr><td>🌸 <code>:cherry_blossom:</code></td><td>🌷 <code>:tulip:</code></td><td>🍀 <code>:four_leaf_clover:</code></td></tr><tr><td>🌹 <code>:rose:</code></td><td>🌻 <code>:sunflower:</code></td><td>🌺 <code>:hibiscus:</code></td></tr><tr><td>🍁 <code>:maple_leaf:</code></td><td>🍃 <code>:leaves:</code></td><td>🍂 <code>:fallen_leaf:</code></td></tr><tr><td>🌿 <code>:herb:</code></td><td>🍄 <code>:mushroom:</code></td><td>🌵 <code>:cactus:</code></td></tr><tr><td>🌴 <code>:palm_tree:</code></td><td>🌲 <code>:evergreen_tree:</code></td><td>🌳 <code>:deciduous_tree:</code></td></tr><tr><td>🌰 <code>:chestnut:</code></td><td>🌱 <code>:seedling:</code></td><td>🌼 <code>:blossom:</code></td></tr><tr><td>🌾 <code>:ear_of_rice:</code></td><td>🐚 <code>:shell:</code></td><td>🌐 <code>:globe_with_meridians:</code></td></tr><tr><td>🌞 <code>:sun_with_face:</code></td><td>🌝 <code>:full_moon_with_face:</code></td><td>🌚 <code>:new_moon_with_face:</code></td></tr><tr><td>🌑 <code>:new_moon:</code></td><td>🌒 <code>:waxing_crescent_moon:</code></td><td>🌓 <code>:first_quarter_moon:</code></td></tr><tr><td>🌔 <code>:waxing_gibbous_moon:</code></td><td>🌕 <code>:full_moon:</code></td><td>🌖 <code>:waning_gibbous_moon:</code></td></tr><tr><td>🌗 <code>:last_quarter_moon:</code></td><td>🌘 <code>:waning_crescent_moon:</code></td><td>🌜 <code>:last_quarter_moon_with_face:</code></td></tr><tr><td>🌛 <code>:first_quarter_moon_with_face:</code></td><td>🌔 <code>:moon:</code></td><td>🌍 <code>:earth_africa:</code></td></tr><tr><td>🌎 <code>:earth_americas:</code></td><td>🌏 <code>:earth_asia:</code></td><td>🌋 <code>:volcano:</code></td></tr><tr><td>🌌 <code>:milky_way:</code></td><td>⛅ <code>:partly_sunny:</code></td><td></td></tr></tbody></table><h2 id="事物"><a class="header-anchor" href="#事物"></a>事物</h2><table><thead><tr><th>🎍 <code>:bamboo:</code></th><th>💝 <code>:gift_heart:</code></th><th>🎎 <code>:dolls:</code></th></tr></thead><tbody><tr><td>🎒 <code>:school_satchel:</code></td><td>🎓 <code>:mortar_board:</code></td><td>🎏 <code>:flags:</code></td></tr><tr><td>🎆 <code>:fireworks:</code></td><td>🎇 <code>:sparkler:</code></td><td>🎐 <code>:wind_chime:</code></td></tr><tr><td>🎑 <code>:rice_scene:</code></td><td>🎃 <code>:jack_o_lantern:</code></td><td>👻 <code>:ghost:</code></td></tr><tr><td>🎅 <code>:santa:</code></td><td>🎄 <code>:christmas_tree:</code></td><td>🎁 <code>:gift:</code></td></tr><tr><td>🔔 <code>:bell:</code></td><td>🔕 <code>:no_bell:</code></td><td>🎋 <code>:tanabata_tree:</code></td></tr><tr><td>🎉 <code>:tada:</code></td><td>🎊 <code>:confetti_ball:</code></td><td>🎈 <code>:balloon:</code></td></tr><tr><td>🔮 <code>:crystal_ball:</code></td><td>💿 <code>:cd:</code></td><td>📀 <code>:dvd:</code></td></tr><tr><td>💾 <code>:floppy_disk:</code></td><td>📷 <code>:camera:</code></td><td>📹 <code>:video_camera:</code></td></tr><tr><td>🎥 <code>:movie_camera:</code></td><td>💻 <code>:computer:</code></td><td>📺 <code>:tv:</code></td></tr><tr><td>📱 <code>:iphone:</code></td><td>☎️ <code>:phone:</code></td><td>☎️ <code>:telephone:</code></td></tr><tr><td>📞 <code>:telephone_receiver:</code></td><td>📟 <code>:pager:</code></td><td>📠 <code>:fax:</code></td></tr><tr><td>💽 <code>:minidisc:</code></td><td>📼 <code>:vhs:</code></td><td>🔉 <code>:sound:</code></td></tr><tr><td>🔈 <code>:speaker:</code></td><td>🔇 <code>:mute:</code></td><td>📢 <code>:loudspeaker:</code></td></tr><tr><td>📣 <code>:mega:</code></td><td>⌛ <code>:hourglass:</code></td><td>⏳ <code>:hourglass_flowing_sand:</code></td></tr><tr><td>⏰ <code>:alarm_clock:</code></td><td>⌚ <code>:watch:</code></td><td>📻 <code>:radio:</code></td></tr><tr><td>📡 <code>:satellite:</code></td><td>➿ <code>:loop:</code></td><td>🔍 <code>:mag:</code></td></tr><tr><td>🔎 <code>:mag_right:</code></td><td>🔓 <code>:unlock:</code></td><td>🔒 <code>:lock:</code></td></tr><tr><td>🔏 <code>:lock_with_ink_pen:</code></td><td>🔐 <code>:closed_lock_with_key:</code></td><td>🔑 <code>:key:</code></td></tr><tr><td>💡 <code>:bulb:</code></td><td>🔦 <code>:flashlight:</code></td><td>🔆 <code>:high_brightness:</code></td></tr><tr><td>🔅 <code>:low_brightness:</code></td><td>🔌 <code>:electric_plug:</code></td><td>🔋 <code>:battery:</code></td></tr><tr><td>📲 <code>:calling:</code></td><td>📧 <code>:email:</code></td><td>📫 <code>:mailbox:</code></td></tr><tr><td>📮 <code>:postbox:</code></td><td>🛀 <code>:bath:</code></td><td>🛁 <code>:bathtub:</code></td></tr><tr><td>🚿 <code>:shower:</code></td><td>🚽 <code>:toilet:</code></td><td>🔧 <code>:wrench:</code></td></tr><tr><td>🔩 <code>:nut_and_bolt:</code></td><td>🔨 <code>:hammer:</code></td><td>💺 <code>:seat:</code></td></tr><tr><td>💰 <code>:moneybag:</code></td><td>💴 <code>:yen:</code></td><td>💵 <code>:dollar:</code></td></tr><tr><td>💷 <code>:pound:</code></td><td>💶 <code>:euro:</code></td><td>💳 <code>:credit_card:</code></td></tr><tr><td>💸 <code>:money_with_wings:</code></td><td>📧 <code>:e-mail:</code></td><td>📥 <code>:inbox_tray:</code></td></tr><tr><td>📤 <code>:outbox_tray:</code></td><td>✉️ <code>:envelope:</code></td><td>📨 <code>:incoming_envelope:</code></td></tr><tr><td>📯 <code>:postal_horn:</code></td><td>📪 <code>:mailbox_closed:</code></td><td>📬 <code>:mailbox_with_mail:</code></td></tr><tr><td>📭 <code>:mailbox_with_no_mail:</code></td><td>🚪 <code>:door:</code></td><td>🚬 <code>:smoking:</code></td></tr><tr><td>💣 <code>:bomb:</code></td><td>🔫 <code>:gun:</code></td><td>🔪 <code>:hocho:</code></td></tr><tr><td>💊 <code>:pill:</code></td><td>💉 <code>:syringe:</code></td><td>📄 <code>:page_facing_up:</code></td></tr><tr><td>📃 <code>:page_with_curl:</code></td><td>📑 <code>:bookmark_tabs:</code></td><td>📊 <code>:bar_chart:</code></td></tr><tr><td>📈 <code>:chart_with_upwards_trend:</code></td><td>📉 <code>:chart_with_downwards_trend:</code></td><td>📜 <code>:scroll:</code></td></tr><tr><td>📋 <code>:clipboard:</code></td><td>📆 <code>:calendar:</code></td><td>📅 <code>:date:</code></td></tr><tr><td>📇 <code>:card_index:</code></td><td>📁 <code>:file_folder:</code></td><td>📂 <code>:open_file_folder:</code></td></tr><tr><td>✂️ <code>:scissors:</code></td><td>📌 <code>:pushpin:</code></td><td>📎 <code>:paperclip:</code></td></tr><tr><td>✒️ <code>:black_nib:</code></td><td>✏️ <code>:pencil2:</code></td><td>📏 <code>:straight_ruler:</code></td></tr><tr><td>📐 <code>:triangular_ruler:</code></td><td>📕 <code>:closed_book:</code></td><td>📗 <code>:green_book:</code></td></tr><tr><td>📘 <code>:blue_book:</code></td><td>📙 <code>:orange_book:</code></td><td>📓 <code>:notebook:</code></td></tr><tr><td>📔 <code>:notebook_with_decorative_cover:</code></td><td>📒 <code>:ledger:</code></td><td>📚 <code>:books:</code></td></tr><tr><td>🔖 <code>:bookmark:</code></td><td>📛 <code>:name_badge:</code></td><td>🔬 <code>:microscope:</code></td></tr><tr><td>🔭 <code>:telescope:</code></td><td>📰 <code>:newspaper:</code></td><td>🏈 <code>:football:</code></td></tr><tr><td>🏀 <code>:basketball:</code></td><td>⚽ <code>:soccer:</code></td><td>⚾ <code>:baseball:</code></td></tr><tr><td>🎾 <code>:tennis:</code></td><td>🎱 <code>:8ball:</code></td><td>🏉 <code>:rugby_football:</code></td></tr><tr><td>🎳 <code>:bowling:</code></td><td>⛳ <code>:golf:</code></td><td>🚵 <code>:mountain_bicyclist:</code></td></tr><tr><td>🚴 <code>:bicyclist:</code></td><td>🏇 <code>:horse_racing:</code></td><td>🏂 <code>:snowboarder:</code></td></tr><tr><td>🏊 <code>:swimmer:</code></td><td>🏄 <code>:surfer:</code></td><td>🎿 <code>:ski:</code></td></tr><tr><td>♠️ <code>:spades:</code></td><td>♥️ <code>:hearts:</code></td><td>♣️ <code>:clubs:</code></td></tr><tr><td>♦️ <code>:diamonds:</code></td><td>💎 <code>:gem:</code></td><td>💍 <code>:ring:</code></td></tr><tr><td>🏆 <code>:trophy:</code></td><td>🎼 <code>:musical_score:</code></td><td>🎹 <code>:musical_keyboard:</code></td></tr><tr><td>🎻 <code>:violin:</code></td><td>👾 <code>:space_invader:</code></td><td>🎮 <code>:video_game:</code></td></tr><tr><td>🃏 <code>:black_joker:</code></td><td>🎴 <code>:flower_playing_cards:</code></td><td>🎲 <code>:game_die:</code></td></tr><tr><td>🎯 <code>:dart:</code></td><td>🀄 <code>:mahjong:</code></td><td>🎬 <code>:clapper:</code></td></tr><tr><td>📝 <code>:memo:</code></td><td>📝 <code>:pencil:</code></td><td>📖 <code>:book:</code></td></tr><tr><td>🎨 <code>:art:</code></td><td>🎤 <code>:microphone:</code></td><td>🎧 <code>:headphones:</code></td></tr><tr><td>🎺 <code>:trumpet:</code></td><td>🎷 <code>:saxophone:</code></td><td>🎸 <code>:guitar:</code></td></tr><tr><td>👞 <code>:shoe:</code></td><td>👡 <code>:sandal:</code></td><td>👠 <code>:high_heel:</code></td></tr><tr><td>💄 <code>:lipstick:</code></td><td>👢 <code>:boot:</code></td><td>👕 <code>:shirt:</code></td></tr><tr><td>👕 <code>:tshirt:</code></td><td>👔 <code>:necktie:</code></td><td>👚 <code>:womans_clothes:</code></td></tr><tr><td>👗 <code>:dress:</code></td><td>🎽 <code>:running_shirt_with_sash:</code></td><td>👖 <code>:jeans:</code></td></tr><tr><td>👘 <code>:kimono:</code></td><td>👙 <code>:bikini:</code></td><td>🎀 <code>:ribbon:</code></td></tr><tr><td>🎩 <code>:tophat:</code></td><td>👑 <code>:crown:</code></td><td>👒 <code>:womans_hat:</code></td></tr><tr><td>👞 <code>:mans_shoe:</code></td><td>🌂 <code>:closed_umbrella:</code></td><td>💼 <code>:briefcase:</code></td></tr><tr><td>👜 <code>:handbag:</code></td><td>👝 <code>:pouch:</code></td><td>👛 <code>:purse:</code></td></tr><tr><td>👓 <code>:eyeglasses:</code></td><td>🎣 <code>:fishing_pole_and_fish:</code></td><td>☕ <code>:coffee:</code></td></tr><tr><td>🍵 <code>:tea:</code></td><td>🍶 <code>:sake:</code></td><td>🍼 <code>:baby_bottle:</code></td></tr><tr><td>🍺 <code>:beer:</code></td><td>🍻 <code>:beers:</code></td><td>🍸 <code>:cocktail:</code></td></tr><tr><td>🍹 <code>:tropical_drink:</code></td><td>🍷 <code>:wine_glass:</code></td><td>🍴 <code>:fork_and_knife:</code></td></tr><tr><td>🍕 <code>:pizza:</code></td><td>🍔 <code>:hamburger:</code></td><td>🍟 <code>:fries:</code></td></tr><tr><td>🍗 <code>:poultry_leg:</code></td><td>🍖 <code>:meat_on_bone:</code></td><td>🍝 <code>:spaghetti:</code></td></tr><tr><td>🍛 <code>:curry:</code></td><td>🍤 <code>:fried_shrimp:</code></td><td>🍱 <code>:bento:</code></td></tr><tr><td>🍣 <code>:sushi:</code></td><td>🍥 <code>:fish_cake:</code></td><td>🍙 <code>:rice_ball:</code></td></tr><tr><td>🍘 <code>:rice_cracker:</code></td><td>🍚 <code>:rice:</code></td><td>🍜 <code>:ramen:</code></td></tr><tr><td>🍲 <code>:stew:</code></td><td>🍢 <code>:oden:</code></td><td>🍡 <code>:dango:</code></td></tr><tr><td>🥚 <code>:egg:</code></td><td>🍞 <code>:bread:</code></td><td>🍩 <code>:doughnut:</code></td></tr><tr><td>🍮 <code>:custard:</code></td><td>🍦 <code>:icecream:</code></td><td>🍨 <code>:ice_cream:</code></td></tr><tr><td>🍧 <code>:shaved_ice:</code></td><td>🎂 <code>:birthday:</code></td><td>🍰 <code>:cake:</code></td></tr><tr><td>🍪 <code>:cookie:</code></td><td>🍫 <code>:chocolate_bar:</code></td><td>🍬 <code>:candy:</code></td></tr><tr><td>🍭 <code>:lollipop:</code></td><td>🍯 <code>:honey_pot:</code></td><td>🍎 <code>:apple:</code></td></tr><tr><td>🍏 <code>:green_apple:</code></td><td>🍊 <code>:tangerine:</code></td><td>🍋 <code>:lemon:</code></td></tr><tr><td>🍒 <code>:cherries:</code></td><td>🍇 <code>:grapes:</code></td><td>🍉 <code>:watermelon:</code></td></tr><tr><td>🍓 <code>:strawberry:</code></td><td>🍑 <code>:peach:</code></td><td>🍈 <code>:melon:</code></td></tr><tr><td>🍌 <code>:banana:</code></td><td>🍐 <code>:pear:</code></td><td>🍍 <code>:pineapple:</code></td></tr><tr><td>🍠 <code>:sweet_potato:</code></td><td>🍆 <code>:eggplant:</code></td><td>🍅 <code>:tomato:</code></td></tr><tr><td>🌽 <code>:corn:</code></td><td></td><td></td></tr></tbody></table><h2 id="地点"><a class="header-anchor" href="#地点"></a>地点</h2><table><thead><tr><th>🏠 <code>:house:</code></th><th>🏡 <code>:house_with_garden:</code></th><th>🏫 <code>:school:</code></th></tr></thead><tbody><tr><td>🏢 <code>:office:</code></td><td>🏣 <code>:post_office:</code></td><td>🏥 <code>:hospital:</code></td></tr><tr><td>🏦 <code>:bank:</code></td><td>🏪 <code>:convenience_store:</code></td><td>🏩 <code>:love_hotel:</code></td></tr><tr><td>🏨 <code>:hotel:</code></td><td>💒 <code>:wedding:</code></td><td>⛪ <code>:church:</code></td></tr><tr><td>🏬 <code>:department_store:</code></td><td>🏤 <code>:european_post_office:</code></td><td>🌇 <code>:city_sunrise:</code></td></tr><tr><td>🌆 <code>:city_sunset:</code></td><td>🏯 <code>:japanese_castle:</code></td><td>🏰 <code>:european_castle:</code></td></tr><tr><td>⛺ <code>:tent:</code></td><td>🏭 <code>:factory:</code></td><td>🗼 <code>:tokyo_tower:</code></td></tr><tr><td>🗾 <code>:japan:</code></td><td>🗻 <code>:mount_fuji:</code></td><td>🌄 <code>:sunrise_over_mountains:</code></td></tr><tr><td>🌅 <code>:sunrise:</code></td><td>🌠 <code>:stars:</code></td><td>🗽 <code>:statue_of_liberty:</code></td></tr><tr><td>🌉 <code>:bridge_at_night:</code></td><td>🎠 <code>:carousel_horse:</code></td><td>🌈 <code>:rainbow:</code></td></tr><tr><td>🎡 <code>:ferris_wheel:</code></td><td>⛲ <code>:fountain:</code></td><td>🎢 <code>:roller_coaster:</code></td></tr><tr><td>🚢 <code>:ship:</code></td><td>🚤 <code>:speedboat:</code></td><td>⛵ <code>:boat:</code></td></tr><tr><td>⛵ <code>:sailboat:</code></td><td>🚣 <code>:rowboat:</code></td><td>⚓ <code>:anchor:</code></td></tr><tr><td>🚀 <code>:rocket:</code></td><td>✈️ <code>:airplane:</code></td><td>🚁 <code>:helicopter:</code></td></tr><tr><td>🚂 <code>:steam_locomotive:</code></td><td>🚊 <code>:tram:</code></td><td>🚞 <code>:mountain_railway:</code></td></tr><tr><td>🚲 <code>:bike:</code></td><td>🚡 <code>:aerial_tramway:</code></td><td>🚟 <code>:suspension_railway:</code></td></tr><tr><td>🚠 <code>:mountain_cableway:</code></td><td>🚜 <code>:tractor:</code></td><td>🚙 <code>:blue_car:</code></td></tr><tr><td>🚘 <code>:oncoming_automobile:</code></td><td>🚗 <code>:car:</code></td><td>🚗 <code>:red_car:</code></td></tr><tr><td>🚕 <code>:taxi:</code></td><td>🚖 <code>:oncoming_taxi:</code></td><td>🚛 <code>:articulated_lorry:</code></td></tr><tr><td>🚌 <code>:bus:</code></td><td>🚍 <code>:oncoming_bus:</code></td><td>🚨 <code>:rotating_light:</code></td></tr><tr><td>🚓 <code>:police_car:</code></td><td>🚔 <code>:oncoming_police_car:</code></td><td>🚒 <code>:fire_engine:</code></td></tr><tr><td>🚑 <code>:ambulance:</code></td><td>🚐 <code>:minibus:</code></td><td>🚚 <code>:truck:</code></td></tr><tr><td>🚋 <code>:train:</code></td><td>🚉 <code>:station:</code></td><td>🚆 <code>:train2:</code></td></tr><tr><td>🚅 <code>:bullettrain_front:</code></td><td>🚄 <code>:bullettrain_side:</code></td><td>🚈 <code>:light_rail:</code></td></tr><tr><td>🚝 <code>:monorail:</code></td><td>🚃 <code>:railway_car:</code></td><td>🚎 <code>:trolleybus:</code></td></tr><tr><td>🎫 <code>:ticket:</code></td><td>⛽ <code>:fuelpump:</code></td><td>🚦 <code>:vertical_traffic_light:</code></td></tr><tr><td>🚥 <code>:traffic_light:</code></td><td>⚠️ <code>:warning:</code></td><td>🚧 <code>:construction:</code></td></tr><tr><td>🔰 <code>:beginner:</code></td><td>🏧 <code>:atm:</code></td><td>🎰 <code>:slot_machine:</code></td></tr><tr><td>🚏 <code>:busstop:</code></td><td>💈 <code>:barber:</code></td><td>♨️ <code>:hotsprings:</code></td></tr><tr><td>🏁 <code>:checkered_flag:</code></td><td>🎌 <code>:crossed_flags:</code></td><td>🏮 <code>:izakaya_lantern:</code></td></tr><tr><td>🗿 <code>:moyai:</code></td><td>🎪 <code>:circus_tent:</code></td><td>🎭 <code>:performing_arts:</code></td></tr><tr><td>📍 <code>:round_pushpin:</code></td><td>🚩 <code>:triangular_flag_on_post:</code></td><td></td></tr></tbody></table><h2 id="符号"><a class="header-anchor" href="#符号"></a>符号</h2><table><thead><tr><th>1️⃣ <code>:one:</code></th><th>2️⃣ <code>:two:</code></th><th>3️⃣ <code>:three:</code></th></tr></thead><tbody><tr><td>4️⃣ <code>:four:</code></td><td>5️⃣ <code>:five:</code></td><td>6️⃣ <code>:six:</code></td></tr><tr><td>7️⃣ <code>:seven:</code></td><td>8️⃣ <code>:eight:</code></td><td>9️⃣ <code>:nine:</code></td></tr><tr><td>🔟 <code>:keycap_ten:</code></td><td>🔢 <code>:1234:</code></td><td>0️⃣ <code>:zero:</code></td></tr><tr><td>#️⃣ <code>:hash:</code></td><td>🔣 <code>:symbols:</code></td><td>◀️ <code>:arrow_backward:</code></td></tr><tr><td>⬇️ <code>:arrow_down:</code></td><td>▶️ <code>:arrow_forward:</code></td><td>⬅️ <code>:arrow_left:</code></td></tr><tr><td>🔠 <code>:capital_abcd:</code></td><td>🔡 <code>:abcd:</code></td><td>🔤 <code>:abc:</code></td></tr><tr><td>↙️ <code>:arrow_lower_left:</code></td><td>↘️ <code>:arrow_lower_right:</code></td><td>➡️ <code>:arrow_right:</code></td></tr><tr><td>⬆️ <code>:arrow_up:</code></td><td>↖️ <code>:arrow_upper_left:</code></td><td>↗️ <code>:arrow_upper_right:</code></td></tr><tr><td>⏬ <code>:arrow_double_down:</code></td><td>⏫ <code>:arrow_double_up:</code></td><td>🔽 <code>:arrow_down_small:</code></td></tr><tr><td>⤵️ <code>:arrow_heading_down:</code></td><td>⤴️ <code>:arrow_heading_up:</code></td><td>↩️ <code>:leftwards_arrow_with_hook:</code></td></tr><tr><td>↪️ <code>:arrow_right_hook:</code></td><td>↔️ <code>:left_right_arrow:</code></td><td>↕️ <code>:arrow_up_down:</code></td></tr><tr><td>🔼 <code>:arrow_up_small:</code></td><td>🔃 <code>:arrows_clockwise:</code></td><td>🔄 <code>:arrows_counterclockwise:</code></td></tr><tr><td>⏪ <code>:rewind:</code></td><td>⏩ <code>:fast_forward:</code></td><td>ℹ️ <code>:information_source:</code></td></tr><tr><td>🆗 <code>:ok:</code></td><td>🔀 <code>:twisted_rightwards_arrows:</code></td><td>🔁 <code>:repeat:</code></td></tr><tr><td>🔂 <code>:repeat_one:</code></td><td>🆕 <code>:new:</code></td><td>🔝 <code>:top:</code></td></tr><tr><td>🆙 <code>:up:</code></td><td>🆒 <code>:cool:</code></td><td>🆓 <code>:free:</code></td></tr><tr><td>🆖 <code>:ng:</code></td><td>🎦 <code>:cinema:</code></td><td>🈁 <code>:koko:</code></td></tr><tr><td>📶 <code>:signal_strength:</code></td><td>🚾 <code>:wc:</code></td><td>🈵 <code>:u6e80:</code></td></tr><tr><td>🈂️ <code>:sa:</code></td><td>🚻 <code>:restroom:</code></td><td>🚹 <code>:mens:</code></td></tr><tr><td>🚺 <code>:womens:</code></td><td>🚼 <code>:baby_symbol:</code></td><td>🚭 <code>:no_smoking:</code></td></tr><tr><td>🅿️ <code>:parking:</code></td><td>♿ <code>:wheelchair:</code></td><td>🚇 <code>:metro:</code></td></tr><tr><td>🛄 <code>:baggage_claim:</code></td><td>🉑 <code>:accept:</code></td><td>💯 <code>:100:</code></td></tr><tr><td>🚰 <code>:potable_water:</code></td><td>🚮 <code>:put_litter_in_its_place:</code></td><td>㊙️ <code>:secret:</code></td></tr><tr><td>㊗️ <code>:congratulations:</code></td><td>Ⓜ️ <code>:m:</code></td><td>🛂 <code>:passport_control:</code></td></tr><tr><td>🛅 <code>:left_luggage:</code></td><td>🛃 <code>:customs:</code></td><td>🉐 <code>:ideograph_advantage:</code></td></tr><tr><td>🆑 <code>:cl:</code></td><td>🆘 <code>:sos:</code></td><td>🆔 <code>:id:</code></td></tr><tr><td>🚫 <code>:no_entry_sign:</code></td><td>🔞 <code>:underage:</code></td><td>📵 <code>:no_mobile_phones:</code></td></tr><tr><td>🚯 <code>:do_not_litter:</code></td><td>🚱 <code>:non-potable_water:</code></td><td>🚳 <code>:no_bicycles:</code></td></tr><tr><td>🚷 <code>:no_pedestrians:</code></td><td>🚸 <code>:children_crossing:</code></td><td>⛔ <code>:no_entry:</code></td></tr><tr><td>✳️ <code>:eight_spoked_asterisk:</code></td><td>✴️ <code>:eight_pointed_black_star:</code></td><td>💟 <code>:heart_decoration:</code></td></tr><tr><td>🆚 <code>:vs:</code></td><td>📳 <code>:vibration_mode:</code></td><td>📴 <code>:mobile_phone_off:</code></td></tr><tr><td>💹 <code>:chart:</code></td><td>💱 <code>:currency_exchange:</code></td><td>♈ <code>:aries:</code></td></tr><tr><td>♉ <code>:taurus:</code></td><td>♊ <code>:gemini:</code></td><td>♋ <code>:cancer:</code></td></tr><tr><td>♌ <code>:leo:</code></td><td>♍ <code>:virgo:</code></td><td>♎ <code>:libra:</code></td></tr><tr><td>♏ <code>:scorpius:</code></td><td>♐ <code>:sagittarius:</code></td><td>♑ <code>:capricorn:</code></td></tr><tr><td>♒ <code>:aquarius:</code></td><td>♓ <code>:pisces:</code></td><td>⛎ <code>:ophiuchus:</code></td></tr><tr><td>🔯 <code>:six_pointed_star:</code></td><td>❎ <code>:negative_squared_cross_mark:</code></td><td>🅰️ <code>:a:</code></td></tr><tr><td>🅱️ <code>:b:</code></td><td>🆎 <code>:ab:</code></td><td>🅾️ <code>:o2:</code></td></tr><tr><td>💠 <code>:diamond_shape_with_a_dot_inside:</code></td><td>♻️ <code>:recycle:</code></td><td>🔚 <code>:end:</code></td></tr><tr><td>🔛 <code>:on:</code></td><td>🔜 <code>:soon:</code></td><td>🕐 <code>:clock1:</code></td></tr><tr><td>🕜 <code>:clock130:</code></td><td>🕙 <code>:clock10:</code></td><td>🕥 <code>:clock1030:</code></td></tr><tr><td>🕚 <code>:clock11:</code></td><td>🕦 <code>:clock1130:</code></td><td>🕛 <code>:clock12:</code></td></tr><tr><td>🕧 <code>:clock1230:</code></td><td>🕑 <code>:clock2:</code></td><td>🕝 <code>:clock230:</code></td></tr><tr><td>🕒 <code>:clock3:</code></td><td>🕞 <code>:clock330:</code></td><td>🕓 <code>:clock4:</code></td></tr><tr><td>🕟 <code>:clock430:</code></td><td>🕔 <code>:clock5:</code></td><td>🕠 <code>:clock530:</code></td></tr><tr><td>🕕 <code>:clock6:</code></td><td>🕡 <code>:clock630:</code></td><td>🕖 <code>:clock7:</code></td></tr><tr><td>🕢 <code>:clock730:</code></td><td>🕗 <code>:clock8:</code></td><td>🕣 <code>:clock830:</code></td></tr><tr><td>🕘 <code>:clock9:</code></td><td>🕤 <code>:clock930:</code></td><td>💲 <code>:heavy_dollar_sign:</code></td></tr><tr><td>©️ <code>:copyright:</code></td><td>®️ <code>:registered:</code></td><td>™️ <code>:tm:</code></td></tr><tr><td>❌ <code>:x:</code></td><td>❗ <code>:heavy_exclamation_mark:</code></td><td>‼️ <code>:bangbang:</code></td></tr><tr><td>⁉️ <code>:interrobang:</code></td><td>⭕ <code>:o:</code></td><td>✖️ <code>:heavy_multiplication_x:</code></td></tr><tr><td>➕ <code>:heavy_plus_sign:</code></td><td>➖ <code>:heavy_minus_sign:</code></td><td>➗ <code>:heavy_division_sign:</code></td></tr><tr><td>💮 <code>:white_flower:</code></td><td>✅ <code>:white_check_mark:</code></td><td>✔️ <code>:heavy_check_mark:</code></td></tr><tr><td>☑️ <code>:ballot_box_with_check:</code></td><td>🔘 <code>:radio_button:</code></td><td>🔗 <code>:link:</code></td></tr><tr><td>➰ <code>:curly_loop:</code></td><td>〰️ <code>:wavy_dash:</code></td><td>〽️ <code>:part_alternation_mark:</code></td></tr><tr><td>🔱 <code>:trident:</code></td><td>🔺 <code>:small_red_triangle:</code></td><td>🔻 <code>:small_red_triangle_down:</code></td></tr><tr><td>⚪ <code>:white_circle:</code></td><td>🔲 <code>:black_square_button:</code></td><td>🔳 <code>:white_square_button:</code></td></tr><tr><td>⚫ <code>:black_circle:</code></td><td>🔸 <code>:small_orange_diamond:</code></td><td>🔴 <code>:red_circle:</code></td></tr><tr><td>🔵 <code>:large_blue_circle:</code></td><td>🔷 <code>:large_blue_diamond:</code></td><td>🔶 <code>:large_orange_diamond:</code></td></tr><tr><td>🔹 <code>:small_blue_diamond:</code></td><td></td><td></td></tr></tbody></table><blockquote><p>原项目GitHub地址: <a href="https://github.com/caiyongji/emoji-list">点此</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MarkDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
